{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 3. \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 \u043d\u0430 django rest. \u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 API. \u0426\u0435\u043b\u044c \u0440\u0430\u0431\u043e\u0442\u044b: \u043e\u0432\u043b\u0430\u0434\u0435\u0442\u044c \u043f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u043c\u0438 \u043d\u0430\u0432\u044b\u043a\u0430\u043c\u0438 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 (backend) \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0439 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Django REST framework.","title":"Home"},{"location":"1/","text":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 1: UDP \u041a\u043b\u0438\u0435\u043d\u0442-\u0421\u0435\u0440\u0432\u0435\u0440 \u041a\u0440\u0430\u0442\u043a\u043e\u0435 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u044f \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, server\u00bb, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u0442\u044c\u0441\u044f \u043d\u0430 \u0441\u0442\u043e\u0440\u043e\u043d\u0435 \u0441\u0435\u0440\u0432\u0435\u0440\u0430. \u0412 \u043e\u0442\u0432\u0435\u0442 \u0441\u0435\u0440\u0432\u0435\u0440 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, client\u00bb, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u0435\u0442\u0441\u044f \u0443 \u043a\u043b\u0438\u0435\u043d\u0442\u0430. \u0421\u0442\u0435\u043a \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u042f\u0437\u044b\u043a: Python \u0411\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430: socket \u041f\u0440\u043e\u0442\u043e\u043a\u043e\u043b: UDP Server import socket sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) sock.bind(('', 6061)) while True: data, addr = sock.recvfrom(1024) print(data.decode()) if not data: break sock.sendto(\"Hello, client\".encode(), addr) Client import socket sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) sock.sendto('Hello, server'.encode(), ('localhost', 6061)) data = sock.recv(1024) sock.close() print(data.decode()) \u0417\u0430\u0434\u0430\u043d\u0438\u0435 2: TCP \u041a\u043b\u0438\u0435\u043d\u0442-\u0421\u0435\u0440\u0432\u0435\u0440 \u0441 \u043c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0435\u0439 \u041a\u0440\u0430\u0442\u043a\u043e\u0435 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u044f \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u0437\u0430\u043f\u0440\u0430\u0448\u0438\u0432\u0430\u0435\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438, \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u0432\u0432\u043e\u0434\u044f\u0442\u0441\u044f \u0441 \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u044b. \u0421\u0435\u0440\u0432\u0435\u0440 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443. \u041c\u043e\u044f \u0437\u0430\u0434\u0430\u0447\u0430 - \u0420\u0435\u0448\u0435\u043d\u0438\u0435 \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u043d\u043e\u0433\u043e \u0443\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044f. \u0421\u0442\u0435\u043a \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u042f\u0437\u044b\u043a: Python \u0411\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430: socket \u041f\u0440\u043e\u0442\u043e\u043a\u043e\u043b: TCP Server import math import socket # TCP def quadraticEquation(a, b, c): D = (b * b - 4 * a * c) if D == 0: x = (-b + math.sqrt(D)) / (2 * a) return x elif D > 0: x1 = (-b - math.sqrt(D)) / (2 * a) x2 = (-b + math.sqrt(D)) / (2 * a) return x1, x2 else: return \"No solution\" serverSocket = socket.socket(socket.AF_INET, socket.SOCK_STREAM) serverSocket.bind((\"localhost\", 7070)) serverSocket.listen(1) while True: client_socket, client_address = serverSocket.accept() data = client_socket.recv(1024).decode() a, b, c = map(float, data.split()) ans = quadraticEquation(a, b, c) client_socket.send(str(ans).encode()) client_socket.close() Client import socket a = float(input()) b = float(input()) c = float(input()) client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM) client_socket.connect((\"localhost\", 7070)) client_socket.send(f\"{a} {b} {c}\".encode()) data = client_socket.recv(1024).decode() print(data) client_socket.close() \u0417\u0430\u0434\u0430\u043d\u0438\u0435 3: HTTP \u0421\u0435\u0440\u0432\u0435\u0440 \u0434\u043b\u044f \u0432\u044b\u0434\u0430\u0447\u0438 HTML \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b \u041a\u0440\u0430\u0442\u043a\u043e\u0435 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u044f \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0435\u0442\u0441\u044f \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0443, \u0438 \u0432 \u043e\u0442\u0432\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 HTTP-\u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0435\u0435 HTML-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0441\u0435\u0440\u0432\u0435\u0440 \u043f\u043e\u0434\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u0438\u0437 \u0444\u0430\u0439\u043b\u0430 index.html. \u0421\u0442\u0435\u043a \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u042f\u0437\u044b\u043a: Python \u0411\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430: socket \u041f\u0440\u043e\u0442\u043e\u043a\u043e\u043b: HTTP Server import socket HOST, PORT, max_users = 'localhost', 2021, 5 with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s: with open(\"index.html\", \"r\") as file: file_content = file.read() s.bind((HOST, PORT)) s.listen(max_users) print(f\"\u0421\u0435\u0440\u0432\u0435\u0440 \u0437\u0430\u043f\u0443\u0449\u0435\u043d \u043d\u0430 {HOST}:{PORT}\") client_socket, client_address = s.accept() print(f\"\u041a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0438\u043b\u0441\u044f: {client_address}\") client_socket.send(b\"HTTP/1.1 200 OK\\n\") client_socket.send(b\"Content-Type: text/html\\n\") client_socket.send(b\"\\n\") client_socket.sendall(file_content.encode('utf-8')) print(\"HTML-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0430 \u043a\u043b\u0438\u0435\u043d\u0442\u0443\") client_socket.close() Client import socket with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s: HOST, PORT = 'localhost', 2021 s.connect((HOST, PORT)) data = s.recv(1024) print(\"\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u043e \u043e\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0430:\") print(data.decode('utf-8')) s.close() \u0417\u0430\u0434\u0430\u043d\u0438\u0435 4: \u041c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0447\u0430\u0442 \u041a\u0440\u0430\u0442\u043a\u043e\u0435 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u044f \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0447\u0430\u0442 \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u043f\u043e\u0442\u043e\u043a\u043e\u0432 \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u043e\u0442 \u0440\u0430\u0437\u043d\u044b\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439. \u0421\u0442\u0435\u043a \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u042f\u0437\u044b\u043a: Python \u0411\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430: socket,threading \u041f\u0440\u043e\u0442\u043e\u043a\u043e\u043b: TCP Server import socket import threading HOST = 'localhost' PORT = 9801 maxUsers = 10 clients = [] usernames = {} #send message for all people def broadcast(message, sender_socket): for client in clients: if client != sender_socket: try: client.send(message) except: client.close() clients.remove(client) def handler(client_socket): username = client_socket.recv(1024).decode('utf-8') usernames[client_socket] = username welcome_message = f\"{username} joined the chat room!\".encode('utf-8') broadcast(welcome_message, client_socket) while True: try: message = client_socket.recv(1024) if not message: break if message.decode('utf-8') == \"/exit\": print(f\"{usernames[client_socket]} disconnected\") clients.remove(client_socket) client_socket.close() broadcast(f\"{usernames[client_socket]} exited the chat room\".encode('utf-8'), client_socket) del usernames[client_socket] break else: full_message = f\"{usernames[client_socket]}: {message.decode('utf-8')}\".encode('utf-8') broadcast(full_message, client_socket) except: print(f\"{usernames[client_socket]} disconnected\") clients.remove(client_socket) client_socket.close() broadcast(f\"{usernames[client_socket]} exited the chat room\".encode('utf-8'), client_socket) del usernames[client_socket] break def start_server(): serverSocket = socket.socket(socket.AF_INET, socket.SOCK_STREAM) serverSocket.bind((HOST, PORT)) serverSocket.listen(maxUsers) print(f\"Server started on {HOST}:{PORT}\") while True: client_socket, client_address = serverSocket.accept() print(f\"Connection from {client_address}\") clients.append(client_socket) thread = threading.Thread(target=handler, args=(client_socket,)) thread.start() start_server() Client import socket import threading HOST = 'localhost' PORT = 9801 class Client: def __init__(self): self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) self.serverAddress = ((HOST, PORT)) self.username = input(\"Enter your username: \") def connect(self): try: self.sock.connect(self.serverAddress) print(\"Connected to server\") self.sock.send(self.username.encode('utf-8')) except Exception as e: print(f\"Error connecting to server: {e}\") return send_thread = threading.Thread(target=self.send_messages) send_thread.start() receive_thread = threading.Thread(target=self.receive_messages) receive_thread.start() def send_messages(self): while True: message = input() if message == '/exit': self.sock.send(message.encode('utf-8')) print(\"You have left the chat\") self.sock.close() break try: self.sock.send(message.encode('utf-8')) except: print(\"Error sending message, closing connection\") self.sock.close() break def receive_messages(self): while True: try: message = self.sock.recv(1024).decode('utf-8') if message: print(message) except: print(\"Error receiving message, closing connection\") self.sock.close() break client = Client() client.connect() \u0417\u0430\u0434\u0430\u043d\u0438\u0435 5: Web-\u0441\u0435\u0440\u0432\u0435\u0440 \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 GET \u0438 POST \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u041a\u0440\u0430\u0442\u043a\u043e\u0435 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u044f \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0432\u0435\u0431-\u0441\u0435\u0440\u0432\u0435\u0440, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u0438 \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u0442 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0430\u0445 \u0438 \u043e\u0446\u0435\u043d\u043a\u0430\u0445 \u0447\u0435\u0440\u0435\u0437 POST-\u0437\u0430\u043f\u0440\u043e\u0441\u044b \u0438 \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u0435\u0442 \u0438\u0445 \u0447\u0435\u0440\u0435\u0437 GET-\u0437\u0430\u043f\u0440\u043e\u0441\u044b. \u0421\u0442\u0435\u043a \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u042f\u0437\u044b\u043a: Python \u0411\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430: socket \u041f\u0440\u043e\u0442\u043e\u043a\u043e\u043b: HTTP \u041b\u0438\u0441\u0442\u0438\u043d\u0433 import socket MAX_LINE = 64 * 1024 class MyHTTPServer: def __init__(self, host='localhost', port=8081): self.host = host self.port = port self._subjects = {} def serve_forever(self): server = socket.socket(socket.AF_INET, socket.SOCK_STREAM) server.bind((self.host, self.port)) server.listen() print(f'Server started on http://{self.host}:{self.port}') while True: conn, _ = server.accept() self.serve_client(conn) def serve_client(self, conn): try: req = self.parse_request(conn) resp = self.handle_request(req) self.send_response(conn, resp) except Exception as e: self.send_error(conn, e) finally: conn.close() def parse_request(self, conn): rfile = conn.makefile('rb') method, target, _ = self.parse_request_line(rfile) headers = self.parse_headers(rfile) return Request(method, target, headers, rfile) def parse_request_line(self, rfile): raw = rfile.readline(MAX_LINE + 1) if len(raw) > MAX_LINE: raise ValueError('Request line too long') req_line = str(raw, 'iso-8859-1').strip() method, target, version = req_line.split() if version != 'HTTP/1.1': raise ValueError('HTTP version not supported') return method, target, version def parse_headers(self, rfile): headers = {} while True: line = rfile.readline(MAX_LINE + 1) if not line or line in (b\"\\r\\n\", b\"\\n\"): break header = str(line, 'iso-8859-1').strip() key, value = header.split(': ', 1) headers[key] = value return headers def handle_request(self, req): if req.method == 'GET': if req.path == '/': return self.handle_get_subjects() elif req.path.startswith('/subject/'): subject_id = req.path[len('/subject/'):] return self.handle_get_subject_by_id(subject_id) elif req.method == 'POST' and req.path == '/subject': return self.handle_post_subject(req) else: raise ValueError('Unsupported method') def handle_post_subject(self, req): content_length = int(req.headers.get('Content-Length', 0)) body = req.rfile.read(content_length).decode('iso-8859-1') params = dict(param.split('=') for param in body.split('&')) if \"name\" not in params or 'mark' not in params: raise ValueError('The name and mark parameters are required\"') sub_id = len(self._subjects) + 1 self._subjects[sub_id] = { \"id\": sub_id, \"name\": params.get('name'), \"mark\": params.get('mark') } return Response(201, \"Created\") def handle_get_subjects(self): html = \"<html><head><title>Subjects</title></head><body><h1>Subjects</h1><ul>\" for subject in self._subjects.values(): html += f\"<li>{subject['name']}: {subject['mark']}</li>\" html += \"</ul></body></html>\" return Response(200, \"OK\", headers={\"Content-Type\": \"text/html\"}, body=html) def handle_get_subject_by_id(self, subject_id): try: subject_id = int(subject_id) subject = self._subjects.get(subject_id) if not subject: return Response(404, \"Not Found\", body=\"Subject not found\") body = f\"Name: {subject['name']}, Mark: {subject['mark']}\" return Response(200, \"OK\", headers={\"Content-Type\": \"text/plain\"}, body=body) except ValueError: return Response(400, \"Bad Request\", body=\"Invalid subject ID\") def send_response(self, conn, resp): status_line = f\"HTTP/1.1 {resp.status} {resp.reason}\\r\\n\" conn.sendall(status_line.encode('iso-8859-1')) for header, value in (resp.headers or {}).items(): conn.sendall(f\"{header}: {value}\\r\\n\".encode('iso-8859-1')) conn.sendall(b\"\\r\\n\") if resp.body: conn.sendall(resp.body.encode('iso-8859-1')) def send_error(self, conn, err): status_code = 500 reason = \"Internal Server Error\" if isinstance(err, ValueError): status_code = 400 reason = str(err) elif isinstance(err, Exception): reason = str(err) print(f\"Error: {err}\") status_line = f\"HTTP/1.1 {status_code} {reason}\\r\\n\" conn.sendall(status_line.encode('iso-8859-1')) conn.sendall(b\"\\r\\n\") conn.sendall(f\"{reason}\\r\\n\".encode('iso-8859-1')) class Request: def __init__(self, method, target, headers, rfile): self.method = method self.path = target self.headers = headers self.rfile = rfile class Response: def __init__(self, status, reason, headers=None, body=None): self.status = status self.reason = reason self.headers = headers or {} self.body = body if __name__ == '__main__': server = MyHTTPServer() try: server.serve_forever() except KeyboardInterrupt: print(\"Server stopped.\") \u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0440\u0430\u0431\u043e\u0442\u044b \u0434\u043b\u044f \u044d\u0442\u043e\u0433\u043e \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044e \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u0432 Postman \u0438 \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u044e \u0447\u0442\u043e \u0432\u044b\u0432\u043e\u0434\u0438\u0442\u0441\u044f \u043d\u0430 \u0441\u0442\u0440\u0430\u043d\u0438\u0447\u043a\u0435","title":"Task 1"},{"location":"1/#1-udp-","text":"","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 1: UDP \u041a\u043b\u0438\u0435\u043d\u0442-\u0421\u0435\u0440\u0432\u0435\u0440"},{"location":"1/#_1","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, server\u00bb, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u0442\u044c\u0441\u044f \u043d\u0430 \u0441\u0442\u043e\u0440\u043e\u043d\u0435 \u0441\u0435\u0440\u0432\u0435\u0440\u0430. \u0412 \u043e\u0442\u0432\u0435\u0442 \u0441\u0435\u0440\u0432\u0435\u0440 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, client\u00bb, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u0435\u0442\u0441\u044f \u0443 \u043a\u043b\u0438\u0435\u043d\u0442\u0430.","title":"\u041a\u0440\u0430\u0442\u043a\u043e\u0435 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u044f"},{"location":"1/#_2","text":"\u042f\u0437\u044b\u043a: Python \u0411\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430: socket \u041f\u0440\u043e\u0442\u043e\u043a\u043e\u043b: UDP","title":"\u0421\u0442\u0435\u043a \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438"},{"location":"1/#server","text":"import socket sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) sock.bind(('', 6061)) while True: data, addr = sock.recvfrom(1024) print(data.decode()) if not data: break sock.sendto(\"Hello, client\".encode(), addr)","title":"Server"},{"location":"1/#client","text":"import socket sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) sock.sendto('Hello, server'.encode(), ('localhost', 6061)) data = sock.recv(1024) sock.close() print(data.decode())","title":"Client"},{"location":"1/#2-tcp-","text":"","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 2: TCP \u041a\u043b\u0438\u0435\u043d\u0442-\u0421\u0435\u0440\u0432\u0435\u0440 \u0441 \u043c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0435\u0439"},{"location":"1/#_3","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u0437\u0430\u043f\u0440\u0430\u0448\u0438\u0432\u0430\u0435\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438, \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u0432\u0432\u043e\u0434\u044f\u0442\u0441\u044f \u0441 \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u044b. \u0421\u0435\u0440\u0432\u0435\u0440 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443. \u041c\u043e\u044f \u0437\u0430\u0434\u0430\u0447\u0430 - \u0420\u0435\u0448\u0435\u043d\u0438\u0435 \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u043d\u043e\u0433\u043e \u0443\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044f.","title":"\u041a\u0440\u0430\u0442\u043a\u043e\u0435 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u044f"},{"location":"1/#_4","text":"\u042f\u0437\u044b\u043a: Python \u0411\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430: socket \u041f\u0440\u043e\u0442\u043e\u043a\u043e\u043b: TCP","title":"\u0421\u0442\u0435\u043a \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438"},{"location":"1/#server_1","text":"import math import socket # TCP def quadraticEquation(a, b, c): D = (b * b - 4 * a * c) if D == 0: x = (-b + math.sqrt(D)) / (2 * a) return x elif D > 0: x1 = (-b - math.sqrt(D)) / (2 * a) x2 = (-b + math.sqrt(D)) / (2 * a) return x1, x2 else: return \"No solution\" serverSocket = socket.socket(socket.AF_INET, socket.SOCK_STREAM) serverSocket.bind((\"localhost\", 7070)) serverSocket.listen(1) while True: client_socket, client_address = serverSocket.accept() data = client_socket.recv(1024).decode() a, b, c = map(float, data.split()) ans = quadraticEquation(a, b, c) client_socket.send(str(ans).encode()) client_socket.close()","title":"Server"},{"location":"1/#client_1","text":"import socket a = float(input()) b = float(input()) c = float(input()) client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM) client_socket.connect((\"localhost\", 7070)) client_socket.send(f\"{a} {b} {c}\".encode()) data = client_socket.recv(1024).decode() print(data) client_socket.close()","title":"Client"},{"location":"1/#3-http-html","text":"","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 3: HTTP \u0421\u0435\u0440\u0432\u0435\u0440 \u0434\u043b\u044f \u0432\u044b\u0434\u0430\u0447\u0438 HTML \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b"},{"location":"1/#_5","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0435\u0442\u0441\u044f \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0443, \u0438 \u0432 \u043e\u0442\u0432\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 HTTP-\u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0435\u0435 HTML-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0441\u0435\u0440\u0432\u0435\u0440 \u043f\u043e\u0434\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u0438\u0437 \u0444\u0430\u0439\u043b\u0430 index.html.","title":"\u041a\u0440\u0430\u0442\u043a\u043e\u0435 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u044f"},{"location":"1/#_6","text":"\u042f\u0437\u044b\u043a: Python \u0411\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430: socket \u041f\u0440\u043e\u0442\u043e\u043a\u043e\u043b: HTTP","title":"\u0421\u0442\u0435\u043a \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438"},{"location":"1/#server_2","text":"import socket HOST, PORT, max_users = 'localhost', 2021, 5 with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s: with open(\"index.html\", \"r\") as file: file_content = file.read() s.bind((HOST, PORT)) s.listen(max_users) print(f\"\u0421\u0435\u0440\u0432\u0435\u0440 \u0437\u0430\u043f\u0443\u0449\u0435\u043d \u043d\u0430 {HOST}:{PORT}\") client_socket, client_address = s.accept() print(f\"\u041a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0438\u043b\u0441\u044f: {client_address}\") client_socket.send(b\"HTTP/1.1 200 OK\\n\") client_socket.send(b\"Content-Type: text/html\\n\") client_socket.send(b\"\\n\") client_socket.sendall(file_content.encode('utf-8')) print(\"HTML-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0430 \u043a\u043b\u0438\u0435\u043d\u0442\u0443\") client_socket.close()","title":"Server"},{"location":"1/#client_2","text":"import socket with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s: HOST, PORT = 'localhost', 2021 s.connect((HOST, PORT)) data = s.recv(1024) print(\"\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u043e \u043e\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0430:\") print(data.decode('utf-8')) s.close()","title":"Client"},{"location":"1/#4","text":"","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 4: \u041c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0447\u0430\u0442"},{"location":"1/#_7","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0447\u0430\u0442 \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u043f\u043e\u0442\u043e\u043a\u043e\u0432 \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u043e\u0442 \u0440\u0430\u0437\u043d\u044b\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439.","title":"\u041a\u0440\u0430\u0442\u043a\u043e\u0435 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u044f"},{"location":"1/#_8","text":"\u042f\u0437\u044b\u043a: Python \u0411\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430: socket,threading \u041f\u0440\u043e\u0442\u043e\u043a\u043e\u043b: TCP","title":"\u0421\u0442\u0435\u043a \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438"},{"location":"1/#server_3","text":"import socket import threading HOST = 'localhost' PORT = 9801 maxUsers = 10 clients = [] usernames = {} #send message for all people def broadcast(message, sender_socket): for client in clients: if client != sender_socket: try: client.send(message) except: client.close() clients.remove(client) def handler(client_socket): username = client_socket.recv(1024).decode('utf-8') usernames[client_socket] = username welcome_message = f\"{username} joined the chat room!\".encode('utf-8') broadcast(welcome_message, client_socket) while True: try: message = client_socket.recv(1024) if not message: break if message.decode('utf-8') == \"/exit\": print(f\"{usernames[client_socket]} disconnected\") clients.remove(client_socket) client_socket.close() broadcast(f\"{usernames[client_socket]} exited the chat room\".encode('utf-8'), client_socket) del usernames[client_socket] break else: full_message = f\"{usernames[client_socket]}: {message.decode('utf-8')}\".encode('utf-8') broadcast(full_message, client_socket) except: print(f\"{usernames[client_socket]} disconnected\") clients.remove(client_socket) client_socket.close() broadcast(f\"{usernames[client_socket]} exited the chat room\".encode('utf-8'), client_socket) del usernames[client_socket] break def start_server(): serverSocket = socket.socket(socket.AF_INET, socket.SOCK_STREAM) serverSocket.bind((HOST, PORT)) serverSocket.listen(maxUsers) print(f\"Server started on {HOST}:{PORT}\") while True: client_socket, client_address = serverSocket.accept() print(f\"Connection from {client_address}\") clients.append(client_socket) thread = threading.Thread(target=handler, args=(client_socket,)) thread.start() start_server()","title":"Server"},{"location":"1/#client_3","text":"import socket import threading HOST = 'localhost' PORT = 9801 class Client: def __init__(self): self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) self.serverAddress = ((HOST, PORT)) self.username = input(\"Enter your username: \") def connect(self): try: self.sock.connect(self.serverAddress) print(\"Connected to server\") self.sock.send(self.username.encode('utf-8')) except Exception as e: print(f\"Error connecting to server: {e}\") return send_thread = threading.Thread(target=self.send_messages) send_thread.start() receive_thread = threading.Thread(target=self.receive_messages) receive_thread.start() def send_messages(self): while True: message = input() if message == '/exit': self.sock.send(message.encode('utf-8')) print(\"You have left the chat\") self.sock.close() break try: self.sock.send(message.encode('utf-8')) except: print(\"Error sending message, closing connection\") self.sock.close() break def receive_messages(self): while True: try: message = self.sock.recv(1024).decode('utf-8') if message: print(message) except: print(\"Error receiving message, closing connection\") self.sock.close() break client = Client() client.connect()","title":"Client"},{"location":"1/#5-web-get-post","text":"","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 5: Web-\u0441\u0435\u0440\u0432\u0435\u0440 \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 GET \u0438 POST \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432"},{"location":"1/#_9","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0432\u0435\u0431-\u0441\u0435\u0440\u0432\u0435\u0440, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u0438 \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u0442 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0430\u0445 \u0438 \u043e\u0446\u0435\u043d\u043a\u0430\u0445 \u0447\u0435\u0440\u0435\u0437 POST-\u0437\u0430\u043f\u0440\u043e\u0441\u044b \u0438 \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u0435\u0442 \u0438\u0445 \u0447\u0435\u0440\u0435\u0437 GET-\u0437\u0430\u043f\u0440\u043e\u0441\u044b.","title":"\u041a\u0440\u0430\u0442\u043a\u043e\u0435 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u044f"},{"location":"1/#_10","text":"\u042f\u0437\u044b\u043a: Python \u0411\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430: socket \u041f\u0440\u043e\u0442\u043e\u043a\u043e\u043b: HTTP","title":"\u0421\u0442\u0435\u043a \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438"},{"location":"1/#_11","text":"import socket MAX_LINE = 64 * 1024 class MyHTTPServer: def __init__(self, host='localhost', port=8081): self.host = host self.port = port self._subjects = {} def serve_forever(self): server = socket.socket(socket.AF_INET, socket.SOCK_STREAM) server.bind((self.host, self.port)) server.listen() print(f'Server started on http://{self.host}:{self.port}') while True: conn, _ = server.accept() self.serve_client(conn) def serve_client(self, conn): try: req = self.parse_request(conn) resp = self.handle_request(req) self.send_response(conn, resp) except Exception as e: self.send_error(conn, e) finally: conn.close() def parse_request(self, conn): rfile = conn.makefile('rb') method, target, _ = self.parse_request_line(rfile) headers = self.parse_headers(rfile) return Request(method, target, headers, rfile) def parse_request_line(self, rfile): raw = rfile.readline(MAX_LINE + 1) if len(raw) > MAX_LINE: raise ValueError('Request line too long') req_line = str(raw, 'iso-8859-1').strip() method, target, version = req_line.split() if version != 'HTTP/1.1': raise ValueError('HTTP version not supported') return method, target, version def parse_headers(self, rfile): headers = {} while True: line = rfile.readline(MAX_LINE + 1) if not line or line in (b\"\\r\\n\", b\"\\n\"): break header = str(line, 'iso-8859-1').strip() key, value = header.split(': ', 1) headers[key] = value return headers def handle_request(self, req): if req.method == 'GET': if req.path == '/': return self.handle_get_subjects() elif req.path.startswith('/subject/'): subject_id = req.path[len('/subject/'):] return self.handle_get_subject_by_id(subject_id) elif req.method == 'POST' and req.path == '/subject': return self.handle_post_subject(req) else: raise ValueError('Unsupported method') def handle_post_subject(self, req): content_length = int(req.headers.get('Content-Length', 0)) body = req.rfile.read(content_length).decode('iso-8859-1') params = dict(param.split('=') for param in body.split('&')) if \"name\" not in params or 'mark' not in params: raise ValueError('The name and mark parameters are required\"') sub_id = len(self._subjects) + 1 self._subjects[sub_id] = { \"id\": sub_id, \"name\": params.get('name'), \"mark\": params.get('mark') } return Response(201, \"Created\") def handle_get_subjects(self): html = \"<html><head><title>Subjects</title></head><body><h1>Subjects</h1><ul>\" for subject in self._subjects.values(): html += f\"<li>{subject['name']}: {subject['mark']}</li>\" html += \"</ul></body></html>\" return Response(200, \"OK\", headers={\"Content-Type\": \"text/html\"}, body=html) def handle_get_subject_by_id(self, subject_id): try: subject_id = int(subject_id) subject = self._subjects.get(subject_id) if not subject: return Response(404, \"Not Found\", body=\"Subject not found\") body = f\"Name: {subject['name']}, Mark: {subject['mark']}\" return Response(200, \"OK\", headers={\"Content-Type\": \"text/plain\"}, body=body) except ValueError: return Response(400, \"Bad Request\", body=\"Invalid subject ID\") def send_response(self, conn, resp): status_line = f\"HTTP/1.1 {resp.status} {resp.reason}\\r\\n\" conn.sendall(status_line.encode('iso-8859-1')) for header, value in (resp.headers or {}).items(): conn.sendall(f\"{header}: {value}\\r\\n\".encode('iso-8859-1')) conn.sendall(b\"\\r\\n\") if resp.body: conn.sendall(resp.body.encode('iso-8859-1')) def send_error(self, conn, err): status_code = 500 reason = \"Internal Server Error\" if isinstance(err, ValueError): status_code = 400 reason = str(err) elif isinstance(err, Exception): reason = str(err) print(f\"Error: {err}\") status_line = f\"HTTP/1.1 {status_code} {reason}\\r\\n\" conn.sendall(status_line.encode('iso-8859-1')) conn.sendall(b\"\\r\\n\") conn.sendall(f\"{reason}\\r\\n\".encode('iso-8859-1')) class Request: def __init__(self, method, target, headers, rfile): self.method = method self.path = target self.headers = headers self.rfile = rfile class Response: def __init__(self, status, reason, headers=None, body=None): self.status = status self.reason = reason self.headers = headers or {} self.body = body if __name__ == '__main__': server = MyHTTPServer() try: server.serve_forever() except KeyboardInterrupt: print(\"Server stopped.\")","title":"\u041b\u0438\u0441\u0442\u0438\u043d\u0433"},{"location":"1/#_12","text":"\u0434\u043b\u044f \u044d\u0442\u043e\u0433\u043e \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044e \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u0432 Postman \u0438 \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u044e \u0447\u0442\u043e \u0432\u044b\u0432\u043e\u0434\u0438\u0442\u0441\u044f \u043d\u0430 \u0441\u0442\u0440\u0430\u043d\u0438\u0447\u043a\u0435","title":"\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0440\u0430\u0431\u043e\u0442\u044b"},{"location":"2/","text":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 1: \u0410\u0432\u0442\u043e.\u0440\u0443 \u041a\u0440\u0430\u0442\u043a\u043e\u0435 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u044f \u0421\u0434\u043b\u0435\u043b\u0430\u0439 \u043f\u0443\u043d\u043a\u0442\u044b 2.1, 2.2 , 2.3 Models from django.contrib.auth.models import AbstractUser, BaseUserManager from django.db import models class OwnerManager(BaseUserManager): def create_user(self, email, password=None, **extra_fields): if not email: raise ValueError(\"Users must have an email address.\") email = self.normalize_email(email) user = self.model(email=email, **extra_fields) user.set_password(password) user.save(using=self._db) return user def create_superuser(self, email, password=None, **extra_fields): extra_fields.setdefault('is_staff', True) extra_fields.setdefault('is_superuser', True) if extra_fields.get('is_staff') is not True: raise ValueError(\"Superuser must have is_staff=True.\") if extra_fields.get('is_superuser') is not True: raise ValueError(\"Superuser must have is_superuser=True.\") return self.create_user(email, password, **extra_fields) class Owner(AbstractUser): username = None email = models.EmailField(unique=True) last_name = models.CharField(max_length=30, null=False, blank=True) first_name = models.CharField(max_length=30, null=False, blank=True) birth_date = models.DateField(null=False) passport_number = models.CharField(max_length=20, null=False, blank=False, unique=True) home_address = models.CharField(max_length=20, null=False, blank=False) nationality = models.CharField(max_length=20, null=False, blank=False) USERNAME_FIELD = 'email' REQUIRED_FIELDS = ['last_name', 'first_name', 'birth_date', 'passport_number', 'home_address', 'nationality'] objects = OwnerManager() def __str__(self): return self.email class Car(models.Model): state_num = models.CharField(max_length=15, null=False, blank=False, unique=True) brand = models.CharField(max_length=20, null=False, blank=False) model = models.CharField(max_length=20, null=False, blank=False) color = models.CharField(max_length=30, null=False, blank=False) owners = models.ManyToManyField( Owner, through=\"Ownership\", related_name=\"cars\", ) def __str__(self) -> str: return f\"{self.brand} {self.model}\" class Ownership(models.Model): owner = models.ForeignKey(Owner, on_delete=models.CASCADE) car = models.ForeignKey(Car, on_delete=models.CASCADE) start_date = models.DateField(null=False, blank=False) end_date = models.DateField(null=True, blank=True) class DriverLicense(models.Model): owner = models.ForeignKey(Owner, on_delete=models.CASCADE) license_id = models.CharField(max_length=10, null=False, blank=False, unique=True) type = models.CharField(max_length=10, null=False, blank=False) license_date = models.DateField(null=True, blank=True) 1) Owner: \u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0430\u044f \u043c\u043e\u0434\u0435\u043b\u044c \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0430, \u0440\u0430\u0441\u0448\u0438\u0440\u044f\u044e\u0449\u0430\u044f AbstractUser. \u041e\u043d\u0430 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 email \u0432\u043c\u0435\u0441\u0442\u043e \u0438\u043c\u0435\u043d\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f (\u0441 \u043f\u043e\u043b\u0435\u043c USERNAME_FIELD). \u0412\u043a\u043b\u044e\u0447\u0430\u0435\u0442 \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u043f\u043e\u043b\u044f, \u0442\u0430\u043a\u0438\u0435 \u043a\u0430\u043a \u0444\u0430\u043c\u0438\u043b\u0438\u044f, \u0438\u043c\u044f, \u0434\u0430\u0442\u0430 \u0440\u043e\u0436\u0434\u0435\u043d\u0438\u044f, \u043d\u043e\u043c\u0435\u0440 \u043f\u0430\u0441\u043f\u043e\u0440\u0442\u0430, \u0430\u0434\u0440\u0435\u0441 \u0438 \u0433\u0440\u0430\u0436\u0434\u0430\u043d\u0441\u0442\u0432\u043e. \u0422\u0430\u043a\u0436\u0435 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u044b \u043c\u0435\u0442\u043e\u0434\u044b \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0438 \u0441\u0443\u043f\u0435\u0440\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0447\u0435\u0440\u0435\u0437 OwnerManager. 2) Car: \u041c\u043e\u0434\u0435\u043b\u044c \u0434\u043b\u044f \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439, \u0432\u043a\u043b\u044e\u0447\u0430\u0435\u0442 \u043f\u043e\u043b\u044f \u0434\u043b\u044f \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u043e\u043d\u043d\u043e\u0433\u043e \u043d\u043e\u043c\u0435\u0440\u0430, \u043c\u0430\u0440\u043a\u0438, \u043c\u043e\u0434\u0435\u043b\u0438 \u0438 \u0446\u0432\u0435\u0442\u0430. \u0421\u0432\u044f\u0437\u0430\u043d\u0430 \u0441 \u043c\u043e\u0434\u0435\u043b\u044c\u044e \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u0447\u0435\u0440\u0435\u0437 \u043f\u0440\u043e\u043c\u0435\u0436\u0443\u0442\u043e\u0447\u043d\u0443\u044e \u043c\u043e\u0434\u0435\u043b\u044c Ownership. 3) Ownership: \u041f\u0440\u043e\u043c\u0435\u0436\u0443\u0442\u043e\u0447\u043d\u0430\u044f \u043c\u043e\u0434\u0435\u043b\u044c, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0441\u0432\u044f\u0437\u044b\u0432\u0430\u0435\u0442 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u0441 \u0438\u0445 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044f\u043c\u0438 \u0438 \u0445\u0440\u0430\u043d\u0438\u0442 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043f\u0435\u0440\u0438\u043e\u0434\u0435 \u0432\u043b\u0430\u0434\u0435\u043d\u0438\u044f \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u043c (\u0434\u0430\u0442\u0430 \u043d\u0430\u0447\u0430\u043b\u0430 \u0438 \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u044f). 4) DriverLicense: \u041c\u043e\u0434\u0435\u043b\u044c \u0434\u043b\u044f \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0445 \u043f\u0440\u0430\u0432 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0430 \u0441 \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u043c \u043d\u043e\u043c\u0435\u0440\u043e\u043c \u043b\u0438\u0446\u0435\u043d\u0437\u0438\u0438, \u0442\u0438\u043f\u043e\u043c \u0438 \u0434\u0430\u0442\u043e\u0439 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f. Views class CarCreateView(CreateView): model = Car fields = [ 'state_num', 'brand', 'model', 'color' ] template_name = 'add_car.html' success_url = reverse_lazy('car_list') class CarDeleteView(DeleteView): model = Car success_url = reverse_lazy('car_list') template_name = 'delete_car.html' class CarUpdateView(UpdateView): model = Car fields = ['state_num', 'brand', 'model', 'color'] template_name = 'car_form.html' success_url = reverse_lazy('car_list') def get_object(self, queryset=None): car_id = self.kwargs.get('pk') car = Car.objects.filter(pk=car_id).first() if not car: raise Http404(f\"Car with id {car_id} does not exist\") return car \u042d\u0442\u0438 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u044e\u0442 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435, \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u0438 \u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0437\u0430\u043f\u0438\u0441\u0435\u0439 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439 \u0432 \u0431\u0430\u0437\u0435 \u0434\u0430\u043d\u043d\u044b\u0445: CarCreateView: \u041e\u0431\u0435\u0441\u043f\u0435\u0447\u0438\u0432\u0430\u0435\u0442 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043d\u043e\u0432\u043e\u0433\u043e \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044f. \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 \u0444\u043e\u0440\u043c\u0443 \u0441 \u043f\u043e\u043b\u044f\u043c\u0438 \u0434\u043b\u044f \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u043e\u043d\u043d\u043e\u0433\u043e \u043d\u043e\u043c\u0435\u0440\u0430, \u043c\u0430\u0440\u043a\u0438, \u043c\u043e\u0434\u0435\u043b\u0438 \u0438 \u0446\u0432\u0435\u0442\u0430, \u0430 \u043f\u043e\u0441\u043b\u0435 \u0443\u0441\u043f\u0435\u0448\u043d\u043e\u0433\u043e \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u043f\u0435\u0440\u0435\u043d\u0430\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u043d\u0430 \u0441\u043f\u0438\u0441\u043e\u043a \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439 (car_list). CarDeleteView: \u041f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0443\u0434\u0430\u043b\u044f\u0442\u044c \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044c \u0438 \u043f\u043e\u0441\u043b\u0435 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u044f \u043f\u0435\u0440\u0435\u043d\u0430\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u043d\u0430 \u0441\u043f\u0438\u0441\u043e\u043a \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439. \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 \u0448\u0430\u0431\u043b\u043e\u043d delete_car.html. CarUpdateView: \u041e\u0431\u0435\u0441\u043f\u0435\u0447\u0438\u0432\u0430\u0435\u0442 \u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044f. \u0415\u0441\u043b\u0438 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044c \u0441 \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u043c pk \u043d\u0435 \u043d\u0430\u0439\u0434\u0435\u043d, \u0432\u044b\u0437\u044b\u0432\u0430\u0435\u0442 \u043e\u0448\u0438\u0431\u043a\u0443 Http404. \u0417\u0430\u0434\u0430\u043d\u0438\u0435 2: \u0421\u043f\u0438\u0441\u043e\u043a \u043e\u0442\u0435\u043b\u0435\u0439 \u041a\u0440\u0430\u0442\u043a\u043e\u0435 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u044f \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b: 1) \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u043d\u043e\u0432\u044b\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439. 2) \u041f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 \u0438 \u0440\u0435\u0437\u0435\u0440\u0432\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043d\u043e\u043c\u0435\u0440\u043e\u0432. \u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0434\u043e\u043b\u0436\u0435\u043d \u0438\u043c\u0435\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0438 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u044f \u0441\u0432\u043e\u0438\u0445 \u0440\u0435\u0437\u0435\u0440\u0432\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0439. 4) \u041d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043e\u0442\u0437\u044b\u0432\u043e\u0432 \u043a \u043d\u043e\u043c\u0435\u0440\u0430\u043c. \u041f\u0440\u0438 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0438 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0435\u0432, \u0434\u043e\u043b\u0436\u043d\u044b \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0442\u044c\u0441\u044f \u043f\u0435\u0440\u0438\u043e\u0434 \u043f\u0440\u043e\u0436\u0438\u0432\u0430\u043d\u0438\u044f, \u0442\u0435\u043a\u0441\u0442 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f, \u0440\u0435\u0439\u0442\u0438\u043d\u0433 (1-10), \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0442\u043e\u0440\u0435. 5) \u0410\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440 \u0434\u043e\u043b\u0436\u0435\u043d \u0438\u043c\u0435\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0437\u0430\u0441\u0435\u043b\u0438\u0442\u044c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0432 \u043e\u0442\u0435\u043b\u044c \u0438 \u0432\u044b\u0441\u0435\u043b\u0438\u0442\u044c \u0438\u0437 \u043e\u0442\u0435\u043b\u044f \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Django-admin. 6) \u0412 \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 \u0434\u043e\u043b\u0436\u043d\u0430 \u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0442\u0430\u0431\u043b\u0438\u0446\u0430, \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u044e\u0449\u0430\u044f \u043f\u043e\u0441\u0442\u043e\u044f\u043b\u044c\u0446\u0435\u0432 \u043e\u0442\u0435\u043b\u044f \u0437\u0430 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0439 \u043c\u0435\u0441\u044f\u0446. \u0421\u0442\u0435\u043a \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u042f\u0437\u044b\u043a: Python \u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u043d\u043e\u0435 \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0435\u043d\u0438\u0435: Python 3.6+, Django 3 Models class Hotel(models.Model): name = models.CharField(max_length=15, unique=True) owner = models.ForeignKey(User, on_delete=models.CASCADE, related_name=\"owner_hotels\") address = models.CharField(max_length=255, blank=True) description = models.TextField(blank=True) favorites = models.ManyToManyField(User, related_name=\"favorite_hotels\", blank=True) class Room(models.Model): SINGLE = 'Single' DOUBLE = 'Double' SUITE = 'Suite' FAMILY = 'Family' ROOM_TYPE_CHOICES = [ (SINGLE, '\u041e\u0434\u043d\u043e\u043c\u0435\u0441\u0442\u043d\u044b\u0439'), (DOUBLE, '\u0414\u0432\u0443\u0445\u043c\u0435\u0441\u0442\u043d\u044b\u0439'), (SUITE, '\u041b\u044e\u043a\u0441'), (FAMILY, '\u0421\u0435\u043c\u0435\u0439\u043d\u044b\u0439'), ] hotel = models.ForeignKey(Hotel, on_delete=models.CASCADE, related_name='room_hotels') type = models.CharField(max_length=15, choices=ROOM_TYPE_CHOICES, default=SINGLE) price = models.DecimalField(max_digits=7, decimal_places=2) class Booking(models.Model): user = models.ForeignKey(User, on_delete=models.CASCADE, related_name=\"bookings\") room = models.ForeignKey(Room, on_delete=models.CASCADE, related_name=\"bookings\") check_in = models.DateTimeField() check_out = models.DateTimeField() class Review(models.Model): user = models.ForeignKey(User, on_delete=models.CASCADE, related_name=\"reviews\") room = models.ForeignKey(Room, on_delete=models.CASCADE, related_name=\"reviews\") text = models.TextField() rating = models.DecimalField(max_digits=3, decimal_places=2) class Profile(models.Model): user = models.OneToOneField(User, on_delete=models.CASCADE, related_name=\"profile\") is_owner = models.BooleanField(default=False) Hotel: \u041c\u043e\u0434\u0435\u043b\u044c \u043e\u0442\u0435\u043b\u044f \u0441 \u043f\u043e\u043b\u044f\u043c\u0438 \u0434\u043b\u044f \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044f, \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0430, \u0430\u0434\u0440\u0435\u0441\u0430, \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u044f \u0438 \u0441\u043f\u0438\u0441\u043a\u0430 \u0438\u0437\u0431\u0440\u0430\u043d\u043d\u044b\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439. oom: \u041c\u043e\u0434\u0435\u043b\u044c \u043a\u043e\u043c\u043d\u0430\u0442\u044b, \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u0430\u044f \u0441 \u043e\u0442\u0435\u043b\u0435\u043c, \u0441 \u0442\u0438\u043f\u043e\u043c (\u043e\u0434\u043d\u043e\u043c\u0435\u0441\u0442\u043d\u044b\u0439, \u0434\u0432\u0443\u0445\u043c\u0435\u0441\u0442\u043d\u044b\u0439, \u043b\u044e\u043a\u0441, \u0441\u0435\u043c\u0435\u0439\u043d\u044b\u0439) \u0438 \u0446\u0435\u043d\u043e\u0439. Booking: \u041c\u043e\u0434\u0435\u043b\u044c \u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0432\u043a\u043b\u044e\u0447\u0430\u0435\u0442 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f, \u043a\u043e\u043c\u043d\u0430\u0442\u0443, \u0434\u0430\u0442\u0443 \u0437\u0430\u0435\u0437\u0434\u0430 \u0438 \u0432\u044b\u0435\u0437\u0434\u0430. Review: \u041c\u043e\u0434\u0435\u043b\u044c \u043e\u0442\u0437\u044b\u0432\u0430 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u043e \u043a\u043e\u043c\u043d\u0430\u0442\u0435 \u0441 \u0442\u0435\u043a\u0441\u0442\u043e\u043c \u0438 \u043e\u0446\u0435\u043d\u043a\u043e\u0439. Profile: \u041c\u043e\u0434\u0435\u043b\u044c \u043f\u0440\u043e\u0444\u0438\u043b\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0430\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0442\u043e\u043c, \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043b\u0438 \u043e\u043d \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u043c \u043e\u0442\u0435\u043b\u044f. \u042d\u0442\u043e\u0442 \u043a\u043e\u0434 \u0440\u0435\u0430\u043b\u0438\u0437\u0443\u0435\u0442 \u0434\u0432\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0434\u043b\u044f \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u0438 \u0438 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439: Views def register(request): if request.method == 'POST': user_form = UserRegistrationForm(request.POST) if user_form.is_valid(): new_user = user_form.save(commit=False) new_user.set_password(user_form.cleaned_data['password']) new_user.save() return redirect('login') else: user_form = UserRegistrationForm() return render(request, 'account/registration_form.html', {'user_form': user_form}) def user_login(request): if request.method == 'POST': form = UserLoginForm(request.POST) if form.is_valid(): cd = form.cleaned_data user = authenticate(username=cd['username'], password=cd['password']) if user is not None: if user.is_active: login(request, user) return redirect('hotel_list') else: return HttpResponse('Disabled account') else: return HttpResponse('Invalid username or password') else: form = UserLoginForm() return render(request, 'account/login.html', {'form': form}) 1) register: \u041e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044e \u043d\u043e\u0432\u043e\u0433\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f. \u0415\u0441\u043b\u0438 \u0444\u043e\u0440\u043c\u0430 \u0441 \u0434\u0430\u043d\u043d\u044b\u043c\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u0430, \u0441\u043e\u0437\u0434\u0430\u0435\u0442\u0441\u044f \u043d\u043e\u0432\u044b\u0439 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c, \u043f\u0430\u0440\u043e\u043b\u044c \u0448\u0438\u0444\u0440\u0443\u0435\u0442\u0441\u044f, \u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u0442\u0441\u044f \u0432 \u0431\u0430\u0437\u0435 \u0434\u0430\u043d\u043d\u044b\u0445. \u041f\u043e\u0441\u043b\u0435 \u044d\u0442\u043e\u0433\u043e \u043f\u0440\u043e\u0438\u0441\u0445\u043e\u0434\u0438\u0442 \u0440\u0435\u0434\u0438\u0440\u0435\u043a\u0442 \u043d\u0430 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443 \u043b\u043e\u0433\u0438\u043d\u0430. 2) user_login: \u041e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u0432\u0445\u043e\u0434 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f. \u041f\u0440\u0438 \u0443\u0441\u043f\u0435\u0448\u043d\u043e\u0439 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 (\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442 \u0438 \u043f\u0430\u0440\u043e\u043b\u044c \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u044b\u0439) \u043f\u0440\u043e\u0438\u0441\u0445\u043e\u0434\u0438\u0442 \u0432\u0445\u043e\u0434 \u0432 \u0441\u0438\u0441\u0442\u0435\u043c\u0443, \u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u043f\u0435\u0440\u0435\u043d\u0430\u043f\u0440\u0430\u0432\u043b\u044f\u044e\u0442 \u043d\u0430 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443 \u0441\u043f\u0438\u0441\u043a\u0430 \u043e\u0442\u0435\u043b\u0435\u0439. \u0412 \u0441\u043b\u0443\u0447\u0430\u0435 \u043d\u0435\u0443\u0441\u043f\u0435\u0448\u043d\u043e\u0433\u043e \u0432\u0445\u043e\u0434\u0430 \u0432\u044b\u0432\u043e\u0434\u0438\u0442\u0441\u044f \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u043e\u0431 \u043e\u0448\u0438\u0431\u043a\u0435.","title":"Task 2"},{"location":"2/#1","text":"","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 1: \u0410\u0432\u0442\u043e.\u0440\u0443"},{"location":"2/#_1","text":"\u0421\u0434\u043b\u0435\u043b\u0430\u0439 \u043f\u0443\u043d\u043a\u0442\u044b 2.1, 2.2 , 2.3","title":"\u041a\u0440\u0430\u0442\u043a\u043e\u0435 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u044f"},{"location":"2/#models","text":"from django.contrib.auth.models import AbstractUser, BaseUserManager from django.db import models class OwnerManager(BaseUserManager): def create_user(self, email, password=None, **extra_fields): if not email: raise ValueError(\"Users must have an email address.\") email = self.normalize_email(email) user = self.model(email=email, **extra_fields) user.set_password(password) user.save(using=self._db) return user def create_superuser(self, email, password=None, **extra_fields): extra_fields.setdefault('is_staff', True) extra_fields.setdefault('is_superuser', True) if extra_fields.get('is_staff') is not True: raise ValueError(\"Superuser must have is_staff=True.\") if extra_fields.get('is_superuser') is not True: raise ValueError(\"Superuser must have is_superuser=True.\") return self.create_user(email, password, **extra_fields) class Owner(AbstractUser): username = None email = models.EmailField(unique=True) last_name = models.CharField(max_length=30, null=False, blank=True) first_name = models.CharField(max_length=30, null=False, blank=True) birth_date = models.DateField(null=False) passport_number = models.CharField(max_length=20, null=False, blank=False, unique=True) home_address = models.CharField(max_length=20, null=False, blank=False) nationality = models.CharField(max_length=20, null=False, blank=False) USERNAME_FIELD = 'email' REQUIRED_FIELDS = ['last_name', 'first_name', 'birth_date', 'passport_number', 'home_address', 'nationality'] objects = OwnerManager() def __str__(self): return self.email class Car(models.Model): state_num = models.CharField(max_length=15, null=False, blank=False, unique=True) brand = models.CharField(max_length=20, null=False, blank=False) model = models.CharField(max_length=20, null=False, blank=False) color = models.CharField(max_length=30, null=False, blank=False) owners = models.ManyToManyField( Owner, through=\"Ownership\", related_name=\"cars\", ) def __str__(self) -> str: return f\"{self.brand} {self.model}\" class Ownership(models.Model): owner = models.ForeignKey(Owner, on_delete=models.CASCADE) car = models.ForeignKey(Car, on_delete=models.CASCADE) start_date = models.DateField(null=False, blank=False) end_date = models.DateField(null=True, blank=True) class DriverLicense(models.Model): owner = models.ForeignKey(Owner, on_delete=models.CASCADE) license_id = models.CharField(max_length=10, null=False, blank=False, unique=True) type = models.CharField(max_length=10, null=False, blank=False) license_date = models.DateField(null=True, blank=True) 1) Owner: \u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0430\u044f \u043c\u043e\u0434\u0435\u043b\u044c \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0430, \u0440\u0430\u0441\u0448\u0438\u0440\u044f\u044e\u0449\u0430\u044f AbstractUser. \u041e\u043d\u0430 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 email \u0432\u043c\u0435\u0441\u0442\u043e \u0438\u043c\u0435\u043d\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f (\u0441 \u043f\u043e\u043b\u0435\u043c USERNAME_FIELD). \u0412\u043a\u043b\u044e\u0447\u0430\u0435\u0442 \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u043f\u043e\u043b\u044f, \u0442\u0430\u043a\u0438\u0435 \u043a\u0430\u043a \u0444\u0430\u043c\u0438\u043b\u0438\u044f, \u0438\u043c\u044f, \u0434\u0430\u0442\u0430 \u0440\u043e\u0436\u0434\u0435\u043d\u0438\u044f, \u043d\u043e\u043c\u0435\u0440 \u043f\u0430\u0441\u043f\u043e\u0440\u0442\u0430, \u0430\u0434\u0440\u0435\u0441 \u0438 \u0433\u0440\u0430\u0436\u0434\u0430\u043d\u0441\u0442\u0432\u043e. \u0422\u0430\u043a\u0436\u0435 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u044b \u043c\u0435\u0442\u043e\u0434\u044b \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0438 \u0441\u0443\u043f\u0435\u0440\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0447\u0435\u0440\u0435\u0437 OwnerManager. 2) Car: \u041c\u043e\u0434\u0435\u043b\u044c \u0434\u043b\u044f \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439, \u0432\u043a\u043b\u044e\u0447\u0430\u0435\u0442 \u043f\u043e\u043b\u044f \u0434\u043b\u044f \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u043e\u043d\u043d\u043e\u0433\u043e \u043d\u043e\u043c\u0435\u0440\u0430, \u043c\u0430\u0440\u043a\u0438, \u043c\u043e\u0434\u0435\u043b\u0438 \u0438 \u0446\u0432\u0435\u0442\u0430. \u0421\u0432\u044f\u0437\u0430\u043d\u0430 \u0441 \u043c\u043e\u0434\u0435\u043b\u044c\u044e \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u0447\u0435\u0440\u0435\u0437 \u043f\u0440\u043e\u043c\u0435\u0436\u0443\u0442\u043e\u0447\u043d\u0443\u044e \u043c\u043e\u0434\u0435\u043b\u044c Ownership. 3) Ownership: \u041f\u0440\u043e\u043c\u0435\u0436\u0443\u0442\u043e\u0447\u043d\u0430\u044f \u043c\u043e\u0434\u0435\u043b\u044c, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0441\u0432\u044f\u0437\u044b\u0432\u0430\u0435\u0442 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u0441 \u0438\u0445 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044f\u043c\u0438 \u0438 \u0445\u0440\u0430\u043d\u0438\u0442 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043f\u0435\u0440\u0438\u043e\u0434\u0435 \u0432\u043b\u0430\u0434\u0435\u043d\u0438\u044f \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u043c (\u0434\u0430\u0442\u0430 \u043d\u0430\u0447\u0430\u043b\u0430 \u0438 \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u044f). 4) DriverLicense: \u041c\u043e\u0434\u0435\u043b\u044c \u0434\u043b\u044f \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0445 \u043f\u0440\u0430\u0432 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0430 \u0441 \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u043c \u043d\u043e\u043c\u0435\u0440\u043e\u043c \u043b\u0438\u0446\u0435\u043d\u0437\u0438\u0438, \u0442\u0438\u043f\u043e\u043c \u0438 \u0434\u0430\u0442\u043e\u0439 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f.","title":"Models"},{"location":"2/#views","text":"class CarCreateView(CreateView): model = Car fields = [ 'state_num', 'brand', 'model', 'color' ] template_name = 'add_car.html' success_url = reverse_lazy('car_list') class CarDeleteView(DeleteView): model = Car success_url = reverse_lazy('car_list') template_name = 'delete_car.html' class CarUpdateView(UpdateView): model = Car fields = ['state_num', 'brand', 'model', 'color'] template_name = 'car_form.html' success_url = reverse_lazy('car_list') def get_object(self, queryset=None): car_id = self.kwargs.get('pk') car = Car.objects.filter(pk=car_id).first() if not car: raise Http404(f\"Car with id {car_id} does not exist\") return car \u042d\u0442\u0438 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u044e\u0442 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435, \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u0438 \u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0437\u0430\u043f\u0438\u0441\u0435\u0439 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439 \u0432 \u0431\u0430\u0437\u0435 \u0434\u0430\u043d\u043d\u044b\u0445: CarCreateView: \u041e\u0431\u0435\u0441\u043f\u0435\u0447\u0438\u0432\u0430\u0435\u0442 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043d\u043e\u0432\u043e\u0433\u043e \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044f. \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 \u0444\u043e\u0440\u043c\u0443 \u0441 \u043f\u043e\u043b\u044f\u043c\u0438 \u0434\u043b\u044f \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u043e\u043d\u043d\u043e\u0433\u043e \u043d\u043e\u043c\u0435\u0440\u0430, \u043c\u0430\u0440\u043a\u0438, \u043c\u043e\u0434\u0435\u043b\u0438 \u0438 \u0446\u0432\u0435\u0442\u0430, \u0430 \u043f\u043e\u0441\u043b\u0435 \u0443\u0441\u043f\u0435\u0448\u043d\u043e\u0433\u043e \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u043f\u0435\u0440\u0435\u043d\u0430\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u043d\u0430 \u0441\u043f\u0438\u0441\u043e\u043a \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439 (car_list). CarDeleteView: \u041f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0443\u0434\u0430\u043b\u044f\u0442\u044c \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044c \u0438 \u043f\u043e\u0441\u043b\u0435 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u044f \u043f\u0435\u0440\u0435\u043d\u0430\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u043d\u0430 \u0441\u043f\u0438\u0441\u043e\u043a \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439. \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 \u0448\u0430\u0431\u043b\u043e\u043d delete_car.html. CarUpdateView: \u041e\u0431\u0435\u0441\u043f\u0435\u0447\u0438\u0432\u0430\u0435\u0442 \u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044f. \u0415\u0441\u043b\u0438 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044c \u0441 \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u043c pk \u043d\u0435 \u043d\u0430\u0439\u0434\u0435\u043d, \u0432\u044b\u0437\u044b\u0432\u0430\u0435\u0442 \u043e\u0448\u0438\u0431\u043a\u0443 Http404.","title":"Views"},{"location":"2/#2","text":"","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 2: \u0421\u043f\u0438\u0441\u043e\u043a \u043e\u0442\u0435\u043b\u0435\u0439"},{"location":"2/#_2","text":"\u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b: 1) \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u043d\u043e\u0432\u044b\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439. 2) \u041f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 \u0438 \u0440\u0435\u0437\u0435\u0440\u0432\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043d\u043e\u043c\u0435\u0440\u043e\u0432. \u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0434\u043e\u043b\u0436\u0435\u043d \u0438\u043c\u0435\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0438 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u044f \u0441\u0432\u043e\u0438\u0445 \u0440\u0435\u0437\u0435\u0440\u0432\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0439. 4) \u041d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043e\u0442\u0437\u044b\u0432\u043e\u0432 \u043a \u043d\u043e\u043c\u0435\u0440\u0430\u043c. \u041f\u0440\u0438 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0438 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0435\u0432, \u0434\u043e\u043b\u0436\u043d\u044b \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0442\u044c\u0441\u044f \u043f\u0435\u0440\u0438\u043e\u0434 \u043f\u0440\u043e\u0436\u0438\u0432\u0430\u043d\u0438\u044f, \u0442\u0435\u043a\u0441\u0442 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f, \u0440\u0435\u0439\u0442\u0438\u043d\u0433 (1-10), \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0442\u043e\u0440\u0435. 5) \u0410\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440 \u0434\u043e\u043b\u0436\u0435\u043d \u0438\u043c\u0435\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0437\u0430\u0441\u0435\u043b\u0438\u0442\u044c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0432 \u043e\u0442\u0435\u043b\u044c \u0438 \u0432\u044b\u0441\u0435\u043b\u0438\u0442\u044c \u0438\u0437 \u043e\u0442\u0435\u043b\u044f \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Django-admin. 6) \u0412 \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 \u0434\u043e\u043b\u0436\u043d\u0430 \u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0442\u0430\u0431\u043b\u0438\u0446\u0430, \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u044e\u0449\u0430\u044f \u043f\u043e\u0441\u0442\u043e\u044f\u043b\u044c\u0446\u0435\u0432 \u043e\u0442\u0435\u043b\u044f \u0437\u0430 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0439 \u043c\u0435\u0441\u044f\u0446.","title":"\u041a\u0440\u0430\u0442\u043a\u043e\u0435 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u044f"},{"location":"2/#_3","text":"\u042f\u0437\u044b\u043a: Python \u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u043d\u043e\u0435 \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0435\u043d\u0438\u0435: Python 3.6+, Django 3","title":"\u0421\u0442\u0435\u043a \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438"},{"location":"2/#models_1","text":"class Hotel(models.Model): name = models.CharField(max_length=15, unique=True) owner = models.ForeignKey(User, on_delete=models.CASCADE, related_name=\"owner_hotels\") address = models.CharField(max_length=255, blank=True) description = models.TextField(blank=True) favorites = models.ManyToManyField(User, related_name=\"favorite_hotels\", blank=True) class Room(models.Model): SINGLE = 'Single' DOUBLE = 'Double' SUITE = 'Suite' FAMILY = 'Family' ROOM_TYPE_CHOICES = [ (SINGLE, '\u041e\u0434\u043d\u043e\u043c\u0435\u0441\u0442\u043d\u044b\u0439'), (DOUBLE, '\u0414\u0432\u0443\u0445\u043c\u0435\u0441\u0442\u043d\u044b\u0439'), (SUITE, '\u041b\u044e\u043a\u0441'), (FAMILY, '\u0421\u0435\u043c\u0435\u0439\u043d\u044b\u0439'), ] hotel = models.ForeignKey(Hotel, on_delete=models.CASCADE, related_name='room_hotels') type = models.CharField(max_length=15, choices=ROOM_TYPE_CHOICES, default=SINGLE) price = models.DecimalField(max_digits=7, decimal_places=2) class Booking(models.Model): user = models.ForeignKey(User, on_delete=models.CASCADE, related_name=\"bookings\") room = models.ForeignKey(Room, on_delete=models.CASCADE, related_name=\"bookings\") check_in = models.DateTimeField() check_out = models.DateTimeField() class Review(models.Model): user = models.ForeignKey(User, on_delete=models.CASCADE, related_name=\"reviews\") room = models.ForeignKey(Room, on_delete=models.CASCADE, related_name=\"reviews\") text = models.TextField() rating = models.DecimalField(max_digits=3, decimal_places=2) class Profile(models.Model): user = models.OneToOneField(User, on_delete=models.CASCADE, related_name=\"profile\") is_owner = models.BooleanField(default=False) Hotel: \u041c\u043e\u0434\u0435\u043b\u044c \u043e\u0442\u0435\u043b\u044f \u0441 \u043f\u043e\u043b\u044f\u043c\u0438 \u0434\u043b\u044f \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044f, \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0430, \u0430\u0434\u0440\u0435\u0441\u0430, \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u044f \u0438 \u0441\u043f\u0438\u0441\u043a\u0430 \u0438\u0437\u0431\u0440\u0430\u043d\u043d\u044b\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439. oom: \u041c\u043e\u0434\u0435\u043b\u044c \u043a\u043e\u043c\u043d\u0430\u0442\u044b, \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u0430\u044f \u0441 \u043e\u0442\u0435\u043b\u0435\u043c, \u0441 \u0442\u0438\u043f\u043e\u043c (\u043e\u0434\u043d\u043e\u043c\u0435\u0441\u0442\u043d\u044b\u0439, \u0434\u0432\u0443\u0445\u043c\u0435\u0441\u0442\u043d\u044b\u0439, \u043b\u044e\u043a\u0441, \u0441\u0435\u043c\u0435\u0439\u043d\u044b\u0439) \u0438 \u0446\u0435\u043d\u043e\u0439. Booking: \u041c\u043e\u0434\u0435\u043b\u044c \u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0432\u043a\u043b\u044e\u0447\u0430\u0435\u0442 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f, \u043a\u043e\u043c\u043d\u0430\u0442\u0443, \u0434\u0430\u0442\u0443 \u0437\u0430\u0435\u0437\u0434\u0430 \u0438 \u0432\u044b\u0435\u0437\u0434\u0430. Review: \u041c\u043e\u0434\u0435\u043b\u044c \u043e\u0442\u0437\u044b\u0432\u0430 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u043e \u043a\u043e\u043c\u043d\u0430\u0442\u0435 \u0441 \u0442\u0435\u043a\u0441\u0442\u043e\u043c \u0438 \u043e\u0446\u0435\u043d\u043a\u043e\u0439. Profile: \u041c\u043e\u0434\u0435\u043b\u044c \u043f\u0440\u043e\u0444\u0438\u043b\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0430\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0442\u043e\u043c, \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043b\u0438 \u043e\u043d \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u043c \u043e\u0442\u0435\u043b\u044f. \u042d\u0442\u043e\u0442 \u043a\u043e\u0434 \u0440\u0435\u0430\u043b\u0438\u0437\u0443\u0435\u0442 \u0434\u0432\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0434\u043b\u044f \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u0438 \u0438 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439:","title":"Models"},{"location":"2/#views_1","text":"def register(request): if request.method == 'POST': user_form = UserRegistrationForm(request.POST) if user_form.is_valid(): new_user = user_form.save(commit=False) new_user.set_password(user_form.cleaned_data['password']) new_user.save() return redirect('login') else: user_form = UserRegistrationForm() return render(request, 'account/registration_form.html', {'user_form': user_form}) def user_login(request): if request.method == 'POST': form = UserLoginForm(request.POST) if form.is_valid(): cd = form.cleaned_data user = authenticate(username=cd['username'], password=cd['password']) if user is not None: if user.is_active: login(request, user) return redirect('hotel_list') else: return HttpResponse('Disabled account') else: return HttpResponse('Invalid username or password') else: form = UserLoginForm() return render(request, 'account/login.html', {'form': form}) 1) register: \u041e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044e \u043d\u043e\u0432\u043e\u0433\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f. \u0415\u0441\u043b\u0438 \u0444\u043e\u0440\u043c\u0430 \u0441 \u0434\u0430\u043d\u043d\u044b\u043c\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u0430, \u0441\u043e\u0437\u0434\u0430\u0435\u0442\u0441\u044f \u043d\u043e\u0432\u044b\u0439 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c, \u043f\u0430\u0440\u043e\u043b\u044c \u0448\u0438\u0444\u0440\u0443\u0435\u0442\u0441\u044f, \u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u0442\u0441\u044f \u0432 \u0431\u0430\u0437\u0435 \u0434\u0430\u043d\u043d\u044b\u0445. \u041f\u043e\u0441\u043b\u0435 \u044d\u0442\u043e\u0433\u043e \u043f\u0440\u043e\u0438\u0441\u0445\u043e\u0434\u0438\u0442 \u0440\u0435\u0434\u0438\u0440\u0435\u043a\u0442 \u043d\u0430 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443 \u043b\u043e\u0433\u0438\u043d\u0430. 2) user_login: \u041e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u0432\u0445\u043e\u0434 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f. \u041f\u0440\u0438 \u0443\u0441\u043f\u0435\u0448\u043d\u043e\u0439 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 (\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442 \u0438 \u043f\u0430\u0440\u043e\u043b\u044c \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u044b\u0439) \u043f\u0440\u043e\u0438\u0441\u0445\u043e\u0434\u0438\u0442 \u0432\u0445\u043e\u0434 \u0432 \u0441\u0438\u0441\u0442\u0435\u043c\u0443, \u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u043f\u0435\u0440\u0435\u043d\u0430\u043f\u0440\u0430\u0432\u043b\u044f\u044e\u0442 \u043d\u0430 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443 \u0441\u043f\u0438\u0441\u043a\u0430 \u043e\u0442\u0435\u043b\u0435\u0439. \u0412 \u0441\u043b\u0443\u0447\u0430\u0435 \u043d\u0435\u0443\u0441\u043f\u0435\u0448\u043d\u043e\u0433\u043e \u0432\u0445\u043e\u0434\u0430 \u0432\u044b\u0432\u043e\u0434\u0438\u0442\u0441\u044f \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u043e\u0431 \u043e\u0448\u0438\u0431\u043a\u0435.","title":"Views"},{"location":"3/","text":"\u041f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21163.1 \u041a\u0440\u0430\u0442\u043a\u043e\u0435 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u044f \u0426\u0435\u043b\u044c \u0440\u0430\u0431\u043e\u0442\u044b: \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043e \u0440\u0430\u0431\u043e\u0442\u0435 \u0441 \u0437\u0430\u043f\u0440\u043e\u0441\u0430\u043c\u0438 \u0432 Django ORM. \u0421\u0442\u0435\u043a \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u042f\u0437\u044b\u043a: Python \u0444\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a : Django, DRF \u041f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u0435 1: \u0426\u0435\u043b\u044c \u0437\u0430\u0434\u0430\u043d\u0438\u044f: \u041d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u043d\u0430 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0432 \u0431\u0434 \u0410\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u0435\u0446 owner1 = Owner.objects.create(first_name=\"\u0418\u0432\u0430\u043d\", last_name=\"\u0418\u0432\u0430\u043d\u043e\u0432\", birth_date=\"1980-05-15\") \u0410\u0432\u0442\u043e car1 = Car.objects.create(state_num=\"A123BC77\", brand=\"Toyota\", model=\"Camry\", color=\"\u0411\u0435\u043b\u044b\u0439\") \u0412\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0435 \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u0435 DriverLicense.objects.create(owner=owner1, license_id=\"ID123456\", type=\"B\", license_date=date(2010, 5, 15)) \u0421\u0432\u044f\u0437\u044c Ownership.objects.create(owner=owner1, car=car1, start_date=\"2020-01-01\") \u0414\u043b\u044f \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 print(Ownership.objects.all()) \u041f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u0435 2: \u041f\u043e \u0441\u043e\u0437\u0434\u0430\u043d\u043d\u044b\u043c \u0432 \u043f\u0440.1 \u0434\u0430\u043d\u043d\u044b\u043c \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u043d\u0430 \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044e: 1. toyota_cars = Car.objects.filter(brand=\"Toyota\") print(toyota_cars) 2. drivers_name = Owner.objects.filter(first_name=\"\u0410\u043d\u043d\u0430\") print(drivers_named_oleg) 3. random_owner = Owner.objects.first() owner_id = random_owner.id license = DriverLicense.objects.get(owner_id=owner_id) print(license) 4. owners_of_red_cars = Owner.objects.filter(cars__color=\"\u041a\u0440\u0430\u0441\u043d\u044b\u0439\").distinct() print(owners_of_red_cars) 5. owners_with_2010_cars = Owner.objects.filter(ownership__start_date__year=2010).distinct() print(owners_with_2010_cars) \u041f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u0435 3: from django.db.models import Min, Max,Count 1. oldest_license_date = DriverLicense.objects.aggregate(oldest_date=Min(\"license_date\"))[\"oldest_date\"] print(f\"\u0421\u0430\u043c\u0430\u044f \u0440\u0430\u043d\u043d\u044f\u044f \u0434\u0430\u0442\u0430 \u0432\u044b\u0434\u0430\u0447\u0438 \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u044f: {oldest_license_date}\") 2. latest_ownership_date = Ownership.objects.aggregate(latest_date=Max(\"end_date\"))[\"latest_date\"] print(f\"\u0421\u0430\u043c\u0430\u044f \u043f\u043e\u0437\u0434\u043d\u044f\u044f \u0434\u0430\u0442\u0430 \u0432\u043b\u0430\u0434\u0435\u043d\u0438\u044f \u043c\u0430\u0448\u0438\u043d\u043e\u0439: {latest_ownership_date}\") 3. cars_per_owner = Owner.objects.annotate(car_count=Count(\"cars\")).values(\"first_name\", \"last_name\", \"car_count\") for owner in cars_per_owner: print(f\"{owner['first_name']} {owner['last_name']} \u0432\u043b\u0430\u0434\u0435\u0435\u0442 {owner['car_count']} \u043c\u0430\u0448\u0438\u043d\u0430\u043c\u0438\") 4. cars_per_brand = Car.objects.values(\"brand\").annotate(car_count=Count(\"id\")).order_by(\"-car_count\") for brand in cars_per_brand: print(f\"\u041c\u0430\u0440\u043a\u0430 {brand['brand']} \u0438\u043c\u0435\u0435\u0442 {brand['car_count']} \u043c\u0430\u0448\u0438\u043d\") 5. owners_sorted_by_license_date = Owner.objects.filter(licenses__isnull=False).distinct().order_by(\"licenses__license_date\") for owner in owners_sorted_by_license_date: print(f\"{owner.first_name} {owner.last_name}\") \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 django \u0438 djangorestframework \u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0438 \u0441 \u0437\u0430\u0434\u0430\u043d\u0438\u0435\u043c \u0438\u0437 \u0442\u0435\u043a\u0441\u0442\u0430 \u0440\u0430\u0431\u043e\u0442\u044b. \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043c\u043e\u0435\u0433\u043e \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u0430 \u0417\u0430\u0434\u0430\u043d\u0438\u0435 10 \u0421\u043e\u0437\u0434\u0430\u0442\u044c \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u043d\u0443\u044e \u0441\u0438\u0441\u0442\u0435\u043c\u0443, \u043f\u0440\u0435\u0434\u043d\u0430\u0437\u043d\u0430\u0447\u0435\u043d\u043d\u0443\u044e \u0434\u043b\u044f \u0430\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440\u0430 \u043b\u0435\u0447\u0435\u0431\u043d\u043e\u0439 \u043a\u043b\u0438\u043d\u0438\u043a\u0438. \u041f\u0440\u0438\u0435\u043c \u043f\u0430\u0446\u0438\u0435\u043d\u0442\u043e\u0432 \u0432\u0435\u0434\u0443\u0442 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0432\u0440\u0430\u0447\u0435\u0439 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0439. \u041d\u0430 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043f\u0430\u0446\u0438\u0435\u043d\u0442\u0430 \u043a\u043b\u0438\u043d\u0438\u043a\u0438 \u0437\u0430\u0432\u043e\u0434\u0438\u0442\u0441\u044f \u043c\u0435\u0434\u0438\u0446\u0438\u043d\u0441\u043a\u0430\u044f \u043a\u0430\u0440\u0442\u0430, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u043e\u0442\u0440\u0430\u0436\u0430\u0435\u0442\u0441\u044f \u0432\u0441\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043f\u043e \u043b\u0438\u0447\u043d\u044b\u043c \u0434\u0430\u043d\u043d\u044b\u043c \u0431\u043e\u043b\u044c\u043d\u043e\u0433\u043e \u0438 \u0438\u0441\u0442\u043e\u0440\u0438\u0438 \u0435\u0433\u043e \u0437\u0430\u0431\u043e\u043b\u0435\u0432\u0430\u043d\u0438\u0439 (\u0434\u0438\u0430\u0433\u043d\u043e\u0437\u044b). \u041f\u0440\u0438 \u043e\u0447\u0435\u0440\u0435\u0434\u043d\u043e\u043c \u043f\u043e\u0441\u0435\u0449\u0435\u043d\u0438\u0438 \u0432\u0440\u0430\u0447\u0430 \u0432 \u043a\u0430\u0440\u0442\u0435 \u043e\u0442\u0440\u0430\u0436\u0430\u0435\u0442\u0441\u044f \u0434\u0430\u0442\u0430 \u0438 \u0432\u0440\u0435\u043c\u044f \u043f\u0440\u0438\u0435\u043c\u0430, \u0434\u0438\u0430\u0433\u043d\u043e\u0437, \u0442\u0435\u043a\u0443\u0449\u0435\u0435 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435 \u0431\u043e\u043b\u044c\u043d\u043e\u0433\u043e, \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0430\u0446\u0438\u0438 \u043f\u043e \u043b\u0435\u0447\u0435\u043d\u0438\u044e. \u0422\u0430\u043a \u043a\u0430\u043a \u043f\u0440\u0438\u0435\u043c \u0432\u0435\u0434\u0435\u0442\u0441\u044f \u0442\u043e\u043b\u044c\u043a\u043e \u043d\u0430 \u043a\u043e\u043c\u043c\u0435\u0440\u0447\u0435\u0441\u043a\u043e\u0439 \u043e\u0441\u043d\u043e\u0432\u0435, \u043f\u043e\u0441\u043b\u0435 \u043e\u0447\u0435\u0440\u0435\u0434\u043d\u043e\u0433\u043e \u043f\u043e\u0441\u0435\u0449\u0435\u043d\u0438\u044f \u043f\u0430\u0446\u0438\u0435\u043d\u0442 \u0434\u043e\u043b\u0436\u0435\u043d \u043e\u043f\u043b\u0430\u0442\u0438\u0442\u044c \u043c\u0435\u0434\u0438\u0446\u0438\u043d\u0441\u043a\u0438\u0435 \u0443\u0441\u043b\u0443\u0433\u0438 (\u043a\u0430\u0436\u0434\u044b\u0439 \u043f\u0440\u0438\u0435\u043c \u043e\u043f\u043b\u0430\u0447\u0438\u0432\u0430\u0435\u0442\u0441\u044f \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e). \u0420\u0430\u0441\u0447\u0435\u0442 \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u0438 \u043f\u043e\u0441\u0435\u0449\u0435\u043d\u0438\u044f \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u0442\u0441\u044f \u0432\u0440\u0430\u0447\u043e\u043c \u0441\u043e\u0433\u043b\u0430\u0441\u043d\u043e \u043f\u0440\u0435\u0439\u0441\u043a\u0443\u0440\u0430\u043d\u0442\u0443 \u043f\u043e \u043a\u043b\u0438\u043d\u0438\u043a\u0435. \u0414\u043b\u044f \u0432\u0435\u0434\u0435\u043d\u0438\u044f \u0432\u043d\u0443\u0442\u0440\u0435\u043d\u043d\u0435\u0439 \u043e\u0442\u0447\u0435\u0442\u043d\u043e\u0441\u0442\u0438 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u0430 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0430\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u0432\u0440\u0430\u0447: \u0444\u0430\u043c\u0438\u043b\u0438\u044f, \u0438\u043c\u044f, \u043e\u0442\u0447\u0435\u0441\u0442\u0432\u043e, \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u044c, \u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0435, \u043f\u043e\u043b, \u0434\u0430\u0442\u0430 \u0440\u043e\u0436\u0434\u0435\u043d\u0438\u044f \u0438 \u0434\u0430\u0442\u0430 \u043d\u0430\u0447\u0430\u043b\u0430 \u0438 \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0432 \u043a\u043b\u0438\u043d\u0438\u043a\u0435, \u0434\u0430\u043d\u043d\u044b\u0435 \u043f\u043e \u0442\u0440\u0443\u0434\u043e\u0432\u043e\u043c\u0443 \u0434\u043e\u0433\u043e\u0432\u043e\u0440\u0443. \u0414\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0432\u0440\u0430\u0447\u0430 \u0441\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0433\u0440\u0430\u0444\u0438\u043a \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u0443\u043a\u0430\u0437\u0430\u043d\u0438\u0435\u043c \u0440\u0430\u0431\u043e\u0447\u0438\u0445 \u0438 \u0432\u044b\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u043d\u0435\u0439. \u041f\u0440\u0438\u0435\u043c \u043f\u0430\u0446\u0438\u0435\u043d\u0442\u043e\u0432 \u0432\u0440\u0430\u0447\u0438 \u043c\u043e\u0433\u0443\u0442 \u0432\u0435\u0441\u0442\u0438 \u0432 \u0440\u0430\u0437\u043d\u044b\u0445 \u043a\u0430\u0431\u0438\u043d\u0435\u0442\u0430\u0445. \u041a\u0430\u0436\u0434\u044b\u0439 \u043a\u0430\u0431\u0438\u043d\u0435\u0442 \u0438\u043c\u0435\u0435\u0442 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u0439 \u0440\u0435\u0436\u0438\u043c \u0440\u0430\u0431\u043e\u0442\u044b, \u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0433\u043e \u0438 \u0432\u043d\u0443\u0442\u0440\u0435\u043d\u043d\u0438\u0439 \u0442\u0435\u043b\u0435\u0444\u043e\u043d. \u041f\u0435\u0440\u0435\u0447\u0435\u043d\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u044b\u0445 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u043a \u0431\u0430\u0437\u0435 \u0434\u0430\u043d\u043d\u044b\u0445: 1. \u0412\u044b\u0432\u0435\u0441\u0442\u0438 \u043f\u043e \u0430\u043b\u0444\u0430\u0432\u0438\u0442\u0443 \u0441\u043f\u0438\u0441\u043e\u043a \u0432\u0441\u0435\u0445 \u043f\u0430\u0446\u0438\u0435\u043d\u0442\u043e\u0432 \u0437\u0430\u0434\u0430\u043d\u043d\u043e\u0433\u043e \u0432\u0440\u0430\u0447\u0430 \u0441 \u0434\u0430\u0442\u0430\u043c\u0438 \u0438 \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c\u044e \u043f\u0440\u0438\u0435\u043c\u043e\u0432. 2. \u0412\u044b\u0432\u0435\u0441\u0442\u0438 \u0442\u0435\u043b\u0435\u0444\u043e\u043d\u044b \u0432\u0441\u0435\u0445 \u043f\u0430\u0446\u0438\u0435\u043d\u0442\u0430\u0445, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043f\u043e\u0441\u0435\u0449\u0430\u043b\u0438 \u043e\u0442\u043e\u043b\u0430\u0440\u0438\u043d\u0433\u043e\u043b\u043e\u0433\u043e\u0432 \u0438 \u0433\u043e\u0434 \u0440\u043e\u0436\u0434\u0435\u043d\u0438\u044f \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0431\u043e\u043b\u044c\u0448\u0435, \u0447\u0435\u043c 1987. 3. \u0412\u044b\u0432\u0435\u0441\u0442\u0438 \u0441\u043f\u0438\u0441\u043e\u043a \u0432\u0440\u0430\u0447\u0435\u0439, \u0432 \u0433\u0440\u0430\u0444\u0438\u043a\u0435 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0441\u0440\u0435\u0434\u0438 \u0440\u0430\u0431\u043e\u0447\u0438\u0445 \u0434\u043d\u0435\u0439 \u0438\u043c\u0435\u0435\u0442\u0441\u044f \u0437\u0430\u0434\u0430\u043d\u043d\u044b\u0439. 4. \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u0440\u0438\u0435\u043c\u043e\u0432 \u043f\u0430\u0446\u0438\u0435\u043d\u0442\u043e\u0432 \u043f\u043e \u0434\u0430\u0442\u0430\u043c. 5. \u0412\u044b\u0447\u0438\u0441\u043b\u0438\u0442\u044c \u0441\u0443\u043c\u043c\u0430\u0440\u043d\u0443\u044e \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u043b\u0435\u0447\u0435\u043d\u0438\u044f \u043f\u0430\u0446\u0438\u0435\u043d\u0442\u043e\u0432 \u043f\u043e \u0434\u043d\u044f\u043c \u0438 \u043f\u043e \u0432\u0440\u0430\u0447\u0430\u043c. 6. \u0421\u043f\u0438\u0441\u043e\u043a \u043f\u0430\u0446\u0438\u0435\u043d\u0442\u043e\u0432, \u0443\u0436\u0435 \u043e\u043f\u043b\u0430\u0442\u0438\u0432\u0448\u0438\u0445 \u043b\u0435\u0447\u0435\u043d\u0438\u0435. \u041f\u0435\u0440\u0435\u0447\u0435\u043d\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u044b\u0445 \u043e\u0442\u0447\u0435\u0442\u043e\u0432: \u041e\u0442\u0447\u0435\u0442 \u043e \u0440\u0430\u0431\u043e\u0442\u0435 \u0432\u0440\u0430\u0447\u0435\u0439 \u0432 \u0437\u0430\u0434\u0430\u043d\u043d\u044b\u0439 \u043f\u0440\u043e\u043c\u0435\u0436\u0443\u0442\u043e\u043a \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u0441 \u0443\u043a\u0430\u0437\u0430\u043d\u0438\u0435\u043c \u0441\u043f\u0438\u0441\u043a\u0430 \u043f\u0440\u0438\u043d\u044f\u0442\u044b\u0445 \u043f\u0430\u0446\u0438\u0435\u043d\u0442\u043e\u0432, \u0438\u0445 \u0434\u0438\u0430\u0433\u043d\u043e\u0437\u0430 \u0438 \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u0438 \u0443\u0441\u043b\u0443\u0433 \u0441 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u0435\u043c \u0441\u0443\u043c\u043c\u0430\u0440\u043d\u043e\u0433\u043e \u0434\u043e\u0445\u043e\u0434\u0430 \u043f\u043e \u043a\u0430\u0436\u0434\u043e\u043c\u0443 \u0432\u0440\u0430\u0447\u0443. \u0421\u0442\u0435\u043a \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u042f\u0437\u044b\u043a: Python \u0444\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a : Django, DRF serializers class PatientSerializer(serializers.ModelSerializer): class Meta: model = Patient fields = ['id', 'first_name', 'last_name', 'birth_date'] class DoctorSerializer(serializers.ModelSerializer): class Meta: model = Doctor fields = '__all__' class AppointmentSerializer(serializers.ModelSerializer): patient = PatientSerializer(read_only=True) doctor = DoctorSerializer(read_only=True) class Meta: model = Appointment fields = ['id', 'appointment_date', 'appointment_time', 'patient', 'doctor', 'cabinet', 'service'] class PaymentSerializer(serializers.ModelSerializer): patient = PatientSerializer(read_only=True) class Meta: model = Payment fields = ['patient', 'service', 'amount', 'payment_date', 'is_paid'] class MedicalCardSerializer(serializers.ModelSerializer): patient = PatientSerializer(read_only=True) class Meta: model = MedicalCard fields = ['patient', 'record_date', 'diagnosis'] \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 PatientSerializer - \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u0434\u0430\u043d\u043d\u044b\u043c\u0438 \u043e \u043f\u0430\u0446\u0438\u0435\u043d\u0442\u0430\u0445, \u0432\u043a\u043b\u044e\u0447\u0430\u044f \u0438\u0445 \u0447\u0442\u0435\u043d\u0438\u0435 \u0438 \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435. DoctorSerializer - \u042d\u0442\u043e\u0442 \u0441\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440 \u043f\u043e\u0434\u0445\u043e\u0434\u0438\u0442 \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u043f\u043e\u043b\u043d\u043e\u0439 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0435\u0439 \u043e \u0432\u0440\u0430\u0447\u0430\u0445, \u0432\u043a\u043b\u044e\u0447\u0430\u044f \u0438\u0445 \u0447\u0442\u0435\u043d\u0438\u0435 \u0438 \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435. AppointmentSerializer - \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u0437\u0430\u043f\u0438\u0441\u044f\u043c\u0438 \u043d\u0430 \u043f\u0440\u0438\u0435\u043c, \u0432\u043a\u043b\u044e\u0447\u0430\u044f \u0434\u0430\u043d\u043d\u044b\u0435 \u043e \u043f\u0430\u0446\u0438\u0435\u043d\u0442\u0435 \u0438 \u0432\u0440\u0430\u0447\u0435. PaymentSerializer - \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u0434\u0430\u043d\u043d\u044b\u043c\u0438 \u043e\u0431 \u043e\u043f\u043b\u0430\u0442\u0430\u0445, \u0432\u043a\u043b\u044e\u0447\u0430\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043f\u0430\u0446\u0438\u0435\u043d\u0442\u0435 \u0438 \u0443\u0441\u043b\u0443\u0433\u0430\u0445. MedicalCardSerializer - \u041f\u0440\u0435\u0434\u043d\u0430\u0437\u043d\u0430\u0447\u0435\u043d \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u043c\u0435\u0434\u0438\u0446\u0438\u043d\u0441\u043a\u0438\u043c\u0438 \u043a\u0430\u0440\u0442\u0430\u043c\u0438, \u0432\u043a\u043b\u044e\u0447\u0430\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0434\u0438\u0430\u0433\u043d\u043e\u0437\u0430\u0445 \u0438 \u043f\u0430\u0446\u0438\u0435\u043d\u0442\u0430\u0445. \u041f\u0440\u0438\u043c\u0435\u0440\u044b \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 http://127.0.0.1:8000/api/appointments/ \u0432\u044b\u0432\u043e\u0434\u0438\u0442 [ { \"id\": 1, \"appointment_date\": \"2024-12-01\", \"appointment_time\": \"18:00:00\", \"patient\": { \"id\": 1, \"first_name\": \"Andrey\", \"last_name\": \"Iakynin\", \"birth_date\": \"2024-12-10\" }, \"doctor\": { \"id\": 1, \"first_name\": \"Kirill\", \"last_name\": \"Kisikev\", \"sex\": \"M\", \"education\": \"Ped\", \"birth_date\": \"2024-12-10\" }, \"cabinet\": 1, \"service\": 1 } ] http://127.0.0.1:8000/api/cabinets/ \u0432\u044b\u0432\u043e\u0434\u0438\u0442 [ { \"id\": 1, \"number\": \"101\" } ] http://127.0.0.1:8000/api/doctor_schedule/ \u0432\u044b\u0432\u043e\u0434\u0438\u0442 [ { \"doctor\": { \"id\": 1, \"first_name\": \"Kirill\", \"last_name\": \"Kisikev\", \"sex\": \"M\", \"education\": \"Ped\", \"birth_date\": \"2024-12-10\" }, \"work_date\": \"2024-12-11\", \"start_time\": \"14:36:18\", \"is_working\": true } ] Djoser \u043c\u0435\u0442\u043e\u0434 POST \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f http://127.0.0.1:8000/api/auth/users/ \u041c\u0435\u0442\u043e\u0434 POST \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0442\u043e\u043a\u0435\u043d\u0430 http://127.0.0.1:8000/api/auth/token/login \u041c\u0435\u0442\u043e\u0432 GET \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u043f\u043e \u0442\u043e\u043a\u0435\u043d\u0443 http://127.0.0.1:8000/api/auth/users/me/ \u0410\u043d\u0430\u043b\u0438\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u0412\u044b\u0432\u0435\u0441\u0442\u0438 \u043f\u043e \u0430\u043b\u0444\u0430\u0432\u0438\u0442\u0443 \u0441\u043f\u0438\u0441\u043e\u043a \u0432\u0441\u0435\u0445 \u043f\u0430\u0446\u0438\u0435\u043d\u0442\u043e\u0432 \u0437\u0430\u0434\u0430\u043d\u043d\u043e\u0433\u043e \u0432\u0440\u0430\u0447\u0430 \u0441 \u0434\u0430\u0442\u0430\u043c\u0438 \u0438 \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c\u044e \u043f\u0440\u0438\u0435\u043c\u043e\u0432. \u0417\u0430\u043f\u0440\u043e\u0441 http://localhost:8000/api/doctors/3/appointments/ \u0412\u044b\u0432\u0435\u0441\u0442\u0438 \u0442\u0435\u043b\u0435\u0444\u043e\u043d\u044b \u0432\u0441\u0435\u0445 \u043f\u0430\u0446\u0438\u0435\u043d\u0442\u0430\u0445, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043f\u043e\u0441\u0435\u0449\u0430\u043b\u0438 \u043e\u0442\u043e\u043b\u0430\u0440\u0438\u043d\u0433\u043e\u043b\u043e\u0433\u043e\u0432 \u0438 \u0433\u043e\u0434 \u0440\u043e\u0436\u0434\u0435\u043d\u0438\u044f \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0431\u043e\u043b\u044c\u0448\u0435, \u0447\u0435\u043c 1987. \u0417\u0430\u043f\u0440\u043e\u0441 http://localhost:8000/api/otolaryngologist-patients/ \u0412\u044b\u0432\u0435\u0441\u0442\u0438 \u0441\u043f\u0438\u0441\u043e\u043a \u0432\u0440\u0430\u0447\u0435\u0439, \u0432 \u0433\u0440\u0430\u0444\u0438\u043a\u0435 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0441\u0440\u0435\u0434\u0438 \u0440\u0430\u0431\u043e\u0447\u0438\u0445 \u0434\u043d\u0435\u0439 \u0438\u043c\u0435\u0435\u0442\u0441\u044f \u0437\u0430\u0434\u0430\u043d\u043d\u044b\u0439. \u0417\u0430\u043f\u0440\u043e\u0441 http://localhost:8000/api/doctors-with-workday/?date=2024-12-01 \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u0440\u0438\u0435\u043c\u043e\u0432 \u043f\u0430\u0446\u0438\u0435\u043d\u0442\u043e\u0432 \u043f\u043e \u0434\u0430\u0442\u0430\u043c. \u0417\u0430\u043f\u0440\u043e\u0441 http://localhost:8000/api/appointments-count-by-date/?date=2024-12-01 \u0412\u044b\u0447\u0438\u0441\u043b\u0438\u0442\u044c \u0441\u0443\u043c\u043c\u0430\u0440\u043d\u0443\u044e \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u043b\u0435\u0447\u0435\u043d\u0438\u044f \u043f\u0430\u0446\u0438\u0435\u043d\u0442\u043e\u0432 \u043f\u043e \u0434\u043d\u044f\u043c \u0438 \u043f\u043e \u0432\u0440\u0430\u0447\u0430\u043c. \u0417\u0430\u043f\u0440\u043e\u0441 http://localhost:8000/api/total-treatment-cost-by-day-and-doctor/?date=2024-12-01 \u0421\u043f\u0438\u0441\u043e\u043a \u043f\u0430\u0446\u0438\u0435\u043d\u0442\u043e\u0432, \u0443\u0436\u0435 \u043e\u043f\u043b\u0430\u0442\u0438\u0432\u0448\u0438\u0445 \u043b\u0435\u0447\u0435\u043d\u0438\u0435. \u0417\u0430\u043f\u0440\u043e\u0441 http://localhost:8000/api/paid-patients/","title":"Task 2"},{"location":"3/#no31","text":"","title":"\u041f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21163.1"},{"location":"3/#_1","text":"\u0426\u0435\u043b\u044c \u0440\u0430\u0431\u043e\u0442\u044b: \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043e \u0440\u0430\u0431\u043e\u0442\u0435 \u0441 \u0437\u0430\u043f\u0440\u043e\u0441\u0430\u043c\u0438 \u0432 Django ORM.","title":"\u041a\u0440\u0430\u0442\u043a\u043e\u0435 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u044f"},{"location":"3/#_2","text":"\u042f\u0437\u044b\u043a: Python \u0444\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a : Django, DRF","title":"\u0421\u0442\u0435\u043a \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438"},{"location":"3/#1","text":"\u0426\u0435\u043b\u044c \u0437\u0430\u0434\u0430\u043d\u0438\u044f: \u041d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u043d\u0430 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0432 \u0431\u0434 \u0410\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u0435\u0446 owner1 = Owner.objects.create(first_name=\"\u0418\u0432\u0430\u043d\", last_name=\"\u0418\u0432\u0430\u043d\u043e\u0432\", birth_date=\"1980-05-15\") \u0410\u0432\u0442\u043e car1 = Car.objects.create(state_num=\"A123BC77\", brand=\"Toyota\", model=\"Camry\", color=\"\u0411\u0435\u043b\u044b\u0439\") \u0412\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0435 \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u0435 DriverLicense.objects.create(owner=owner1, license_id=\"ID123456\", type=\"B\", license_date=date(2010, 5, 15)) \u0421\u0432\u044f\u0437\u044c Ownership.objects.create(owner=owner1, car=car1, start_date=\"2020-01-01\") \u0414\u043b\u044f \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 print(Ownership.objects.all())","title":"\u041f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u0435 1:"},{"location":"3/#2","text":"\u041f\u043e \u0441\u043e\u0437\u0434\u0430\u043d\u043d\u044b\u043c \u0432 \u043f\u0440.1 \u0434\u0430\u043d\u043d\u044b\u043c \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u043d\u0430 \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044e: 1. toyota_cars = Car.objects.filter(brand=\"Toyota\") print(toyota_cars) 2. drivers_name = Owner.objects.filter(first_name=\"\u0410\u043d\u043d\u0430\") print(drivers_named_oleg) 3. random_owner = Owner.objects.first() owner_id = random_owner.id license = DriverLicense.objects.get(owner_id=owner_id) print(license) 4. owners_of_red_cars = Owner.objects.filter(cars__color=\"\u041a\u0440\u0430\u0441\u043d\u044b\u0439\").distinct() print(owners_of_red_cars) 5. owners_with_2010_cars = Owner.objects.filter(ownership__start_date__year=2010).distinct() print(owners_with_2010_cars)","title":"\u041f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u0435 2:"},{"location":"3/#3","text":"from django.db.models import Min, Max,Count 1. oldest_license_date = DriverLicense.objects.aggregate(oldest_date=Min(\"license_date\"))[\"oldest_date\"] print(f\"\u0421\u0430\u043c\u0430\u044f \u0440\u0430\u043d\u043d\u044f\u044f \u0434\u0430\u0442\u0430 \u0432\u044b\u0434\u0430\u0447\u0438 \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u044f: {oldest_license_date}\") 2. latest_ownership_date = Ownership.objects.aggregate(latest_date=Max(\"end_date\"))[\"latest_date\"] print(f\"\u0421\u0430\u043c\u0430\u044f \u043f\u043e\u0437\u0434\u043d\u044f\u044f \u0434\u0430\u0442\u0430 \u0432\u043b\u0430\u0434\u0435\u043d\u0438\u044f \u043c\u0430\u0448\u0438\u043d\u043e\u0439: {latest_ownership_date}\") 3. cars_per_owner = Owner.objects.annotate(car_count=Count(\"cars\")).values(\"first_name\", \"last_name\", \"car_count\") for owner in cars_per_owner: print(f\"{owner['first_name']} {owner['last_name']} \u0432\u043b\u0430\u0434\u0435\u0435\u0442 {owner['car_count']} \u043c\u0430\u0448\u0438\u043d\u0430\u043c\u0438\") 4. cars_per_brand = Car.objects.values(\"brand\").annotate(car_count=Count(\"id\")).order_by(\"-car_count\") for brand in cars_per_brand: print(f\"\u041c\u0430\u0440\u043a\u0430 {brand['brand']} \u0438\u043c\u0435\u0435\u0442 {brand['car_count']} \u043c\u0430\u0448\u0438\u043d\") 5. owners_sorted_by_license_date = Owner.objects.filter(licenses__isnull=False).distinct().order_by(\"licenses__license_date\") for owner in owners_sorted_by_license_date: print(f\"{owner.first_name} {owner.last_name}\")","title":"\u041f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u0435 3:"},{"location":"3/#django-djangorestframework","text":"","title":"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 django \u0438 djangorestframework \u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0438 \u0441 \u0437\u0430\u0434\u0430\u043d\u0438\u0435\u043c \u0438\u0437 \u0442\u0435\u043a\u0441\u0442\u0430 \u0440\u0430\u0431\u043e\u0442\u044b."},{"location":"3/#_3","text":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 10 \u0421\u043e\u0437\u0434\u0430\u0442\u044c \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u043d\u0443\u044e \u0441\u0438\u0441\u0442\u0435\u043c\u0443, \u043f\u0440\u0435\u0434\u043d\u0430\u0437\u043d\u0430\u0447\u0435\u043d\u043d\u0443\u044e \u0434\u043b\u044f \u0430\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440\u0430 \u043b\u0435\u0447\u0435\u0431\u043d\u043e\u0439 \u043a\u043b\u0438\u043d\u0438\u043a\u0438. \u041f\u0440\u0438\u0435\u043c \u043f\u0430\u0446\u0438\u0435\u043d\u0442\u043e\u0432 \u0432\u0435\u0434\u0443\u0442 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0432\u0440\u0430\u0447\u0435\u0439 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0439. \u041d\u0430 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043f\u0430\u0446\u0438\u0435\u043d\u0442\u0430 \u043a\u043b\u0438\u043d\u0438\u043a\u0438 \u0437\u0430\u0432\u043e\u0434\u0438\u0442\u0441\u044f \u043c\u0435\u0434\u0438\u0446\u0438\u043d\u0441\u043a\u0430\u044f \u043a\u0430\u0440\u0442\u0430, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u043e\u0442\u0440\u0430\u0436\u0430\u0435\u0442\u0441\u044f \u0432\u0441\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043f\u043e \u043b\u0438\u0447\u043d\u044b\u043c \u0434\u0430\u043d\u043d\u044b\u043c \u0431\u043e\u043b\u044c\u043d\u043e\u0433\u043e \u0438 \u0438\u0441\u0442\u043e\u0440\u0438\u0438 \u0435\u0433\u043e \u0437\u0430\u0431\u043e\u043b\u0435\u0432\u0430\u043d\u0438\u0439 (\u0434\u0438\u0430\u0433\u043d\u043e\u0437\u044b). \u041f\u0440\u0438 \u043e\u0447\u0435\u0440\u0435\u0434\u043d\u043e\u043c \u043f\u043e\u0441\u0435\u0449\u0435\u043d\u0438\u0438 \u0432\u0440\u0430\u0447\u0430 \u0432 \u043a\u0430\u0440\u0442\u0435 \u043e\u0442\u0440\u0430\u0436\u0430\u0435\u0442\u0441\u044f \u0434\u0430\u0442\u0430 \u0438 \u0432\u0440\u0435\u043c\u044f \u043f\u0440\u0438\u0435\u043c\u0430, \u0434\u0438\u0430\u0433\u043d\u043e\u0437, \u0442\u0435\u043a\u0443\u0449\u0435\u0435 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435 \u0431\u043e\u043b\u044c\u043d\u043e\u0433\u043e, \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0430\u0446\u0438\u0438 \u043f\u043e \u043b\u0435\u0447\u0435\u043d\u0438\u044e. \u0422\u0430\u043a \u043a\u0430\u043a \u043f\u0440\u0438\u0435\u043c \u0432\u0435\u0434\u0435\u0442\u0441\u044f \u0442\u043e\u043b\u044c\u043a\u043e \u043d\u0430 \u043a\u043e\u043c\u043c\u0435\u0440\u0447\u0435\u0441\u043a\u043e\u0439 \u043e\u0441\u043d\u043e\u0432\u0435, \u043f\u043e\u0441\u043b\u0435 \u043e\u0447\u0435\u0440\u0435\u0434\u043d\u043e\u0433\u043e \u043f\u043e\u0441\u0435\u0449\u0435\u043d\u0438\u044f \u043f\u0430\u0446\u0438\u0435\u043d\u0442 \u0434\u043e\u043b\u0436\u0435\u043d \u043e\u043f\u043b\u0430\u0442\u0438\u0442\u044c \u043c\u0435\u0434\u0438\u0446\u0438\u043d\u0441\u043a\u0438\u0435 \u0443\u0441\u043b\u0443\u0433\u0438 (\u043a\u0430\u0436\u0434\u044b\u0439 \u043f\u0440\u0438\u0435\u043c \u043e\u043f\u043b\u0430\u0447\u0438\u0432\u0430\u0435\u0442\u0441\u044f \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e). \u0420\u0430\u0441\u0447\u0435\u0442 \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u0438 \u043f\u043e\u0441\u0435\u0449\u0435\u043d\u0438\u044f \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u0442\u0441\u044f \u0432\u0440\u0430\u0447\u043e\u043c \u0441\u043e\u0433\u043b\u0430\u0441\u043d\u043e \u043f\u0440\u0435\u0439\u0441\u043a\u0443\u0440\u0430\u043d\u0442\u0443 \u043f\u043e \u043a\u043b\u0438\u043d\u0438\u043a\u0435. \u0414\u043b\u044f \u0432\u0435\u0434\u0435\u043d\u0438\u044f \u0432\u043d\u0443\u0442\u0440\u0435\u043d\u043d\u0435\u0439 \u043e\u0442\u0447\u0435\u0442\u043d\u043e\u0441\u0442\u0438 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u0430 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0430\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u0432\u0440\u0430\u0447: \u0444\u0430\u043c\u0438\u043b\u0438\u044f, \u0438\u043c\u044f, \u043e\u0442\u0447\u0435\u0441\u0442\u0432\u043e, \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u044c, \u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0435, \u043f\u043e\u043b, \u0434\u0430\u0442\u0430 \u0440\u043e\u0436\u0434\u0435\u043d\u0438\u044f \u0438 \u0434\u0430\u0442\u0430 \u043d\u0430\u0447\u0430\u043b\u0430 \u0438 \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0432 \u043a\u043b\u0438\u043d\u0438\u043a\u0435, \u0434\u0430\u043d\u043d\u044b\u0435 \u043f\u043e \u0442\u0440\u0443\u0434\u043e\u0432\u043e\u043c\u0443 \u0434\u043e\u0433\u043e\u0432\u043e\u0440\u0443. \u0414\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0432\u0440\u0430\u0447\u0430 \u0441\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0433\u0440\u0430\u0444\u0438\u043a \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u0443\u043a\u0430\u0437\u0430\u043d\u0438\u0435\u043c \u0440\u0430\u0431\u043e\u0447\u0438\u0445 \u0438 \u0432\u044b\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u043d\u0435\u0439. \u041f\u0440\u0438\u0435\u043c \u043f\u0430\u0446\u0438\u0435\u043d\u0442\u043e\u0432 \u0432\u0440\u0430\u0447\u0438 \u043c\u043e\u0433\u0443\u0442 \u0432\u0435\u0441\u0442\u0438 \u0432 \u0440\u0430\u0437\u043d\u044b\u0445 \u043a\u0430\u0431\u0438\u043d\u0435\u0442\u0430\u0445. \u041a\u0430\u0436\u0434\u044b\u0439 \u043a\u0430\u0431\u0438\u043d\u0435\u0442 \u0438\u043c\u0435\u0435\u0442 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u0439 \u0440\u0435\u0436\u0438\u043c \u0440\u0430\u0431\u043e\u0442\u044b, \u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0433\u043e \u0438 \u0432\u043d\u0443\u0442\u0440\u0435\u043d\u043d\u0438\u0439 \u0442\u0435\u043b\u0435\u0444\u043e\u043d. \u041f\u0435\u0440\u0435\u0447\u0435\u043d\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u044b\u0445 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u043a \u0431\u0430\u0437\u0435 \u0434\u0430\u043d\u043d\u044b\u0445: 1. \u0412\u044b\u0432\u0435\u0441\u0442\u0438 \u043f\u043e \u0430\u043b\u0444\u0430\u0432\u0438\u0442\u0443 \u0441\u043f\u0438\u0441\u043e\u043a \u0432\u0441\u0435\u0445 \u043f\u0430\u0446\u0438\u0435\u043d\u0442\u043e\u0432 \u0437\u0430\u0434\u0430\u043d\u043d\u043e\u0433\u043e \u0432\u0440\u0430\u0447\u0430 \u0441 \u0434\u0430\u0442\u0430\u043c\u0438 \u0438 \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c\u044e \u043f\u0440\u0438\u0435\u043c\u043e\u0432. 2. \u0412\u044b\u0432\u0435\u0441\u0442\u0438 \u0442\u0435\u043b\u0435\u0444\u043e\u043d\u044b \u0432\u0441\u0435\u0445 \u043f\u0430\u0446\u0438\u0435\u043d\u0442\u0430\u0445, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043f\u043e\u0441\u0435\u0449\u0430\u043b\u0438 \u043e\u0442\u043e\u043b\u0430\u0440\u0438\u043d\u0433\u043e\u043b\u043e\u0433\u043e\u0432 \u0438 \u0433\u043e\u0434 \u0440\u043e\u0436\u0434\u0435\u043d\u0438\u044f \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0431\u043e\u043b\u044c\u0448\u0435, \u0447\u0435\u043c 1987. 3. \u0412\u044b\u0432\u0435\u0441\u0442\u0438 \u0441\u043f\u0438\u0441\u043e\u043a \u0432\u0440\u0430\u0447\u0435\u0439, \u0432 \u0433\u0440\u0430\u0444\u0438\u043a\u0435 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0441\u0440\u0435\u0434\u0438 \u0440\u0430\u0431\u043e\u0447\u0438\u0445 \u0434\u043d\u0435\u0439 \u0438\u043c\u0435\u0435\u0442\u0441\u044f \u0437\u0430\u0434\u0430\u043d\u043d\u044b\u0439. 4. \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u0440\u0438\u0435\u043c\u043e\u0432 \u043f\u0430\u0446\u0438\u0435\u043d\u0442\u043e\u0432 \u043f\u043e \u0434\u0430\u0442\u0430\u043c. 5. \u0412\u044b\u0447\u0438\u0441\u043b\u0438\u0442\u044c \u0441\u0443\u043c\u043c\u0430\u0440\u043d\u0443\u044e \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u043b\u0435\u0447\u0435\u043d\u0438\u044f \u043f\u0430\u0446\u0438\u0435\u043d\u0442\u043e\u0432 \u043f\u043e \u0434\u043d\u044f\u043c \u0438 \u043f\u043e \u0432\u0440\u0430\u0447\u0430\u043c. 6. \u0421\u043f\u0438\u0441\u043e\u043a \u043f\u0430\u0446\u0438\u0435\u043d\u0442\u043e\u0432, \u0443\u0436\u0435 \u043e\u043f\u043b\u0430\u0442\u0438\u0432\u0448\u0438\u0445 \u043b\u0435\u0447\u0435\u043d\u0438\u0435. \u041f\u0435\u0440\u0435\u0447\u0435\u043d\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u044b\u0445 \u043e\u0442\u0447\u0435\u0442\u043e\u0432: \u041e\u0442\u0447\u0435\u0442 \u043e \u0440\u0430\u0431\u043e\u0442\u0435 \u0432\u0440\u0430\u0447\u0435\u0439 \u0432 \u0437\u0430\u0434\u0430\u043d\u043d\u044b\u0439 \u043f\u0440\u043e\u043c\u0435\u0436\u0443\u0442\u043e\u043a \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u0441 \u0443\u043a\u0430\u0437\u0430\u043d\u0438\u0435\u043c \u0441\u043f\u0438\u0441\u043a\u0430 \u043f\u0440\u0438\u043d\u044f\u0442\u044b\u0445 \u043f\u0430\u0446\u0438\u0435\u043d\u0442\u043e\u0432, \u0438\u0445 \u0434\u0438\u0430\u0433\u043d\u043e\u0437\u0430 \u0438 \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u0438 \u0443\u0441\u043b\u0443\u0433 \u0441 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u0435\u043c \u0441\u0443\u043c\u043c\u0430\u0440\u043d\u043e\u0433\u043e \u0434\u043e\u0445\u043e\u0434\u0430 \u043f\u043e \u043a\u0430\u0436\u0434\u043e\u043c\u0443 \u0432\u0440\u0430\u0447\u0443.","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043c\u043e\u0435\u0433\u043e \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u0430"},{"location":"3/#_4","text":"\u042f\u0437\u044b\u043a: Python \u0444\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a : Django, DRF","title":"\u0421\u0442\u0435\u043a \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438"},{"location":"3/#serializers","text":"class PatientSerializer(serializers.ModelSerializer): class Meta: model = Patient fields = ['id', 'first_name', 'last_name', 'birth_date'] class DoctorSerializer(serializers.ModelSerializer): class Meta: model = Doctor fields = '__all__' class AppointmentSerializer(serializers.ModelSerializer): patient = PatientSerializer(read_only=True) doctor = DoctorSerializer(read_only=True) class Meta: model = Appointment fields = ['id', 'appointment_date', 'appointment_time', 'patient', 'doctor', 'cabinet', 'service'] class PaymentSerializer(serializers.ModelSerializer): patient = PatientSerializer(read_only=True) class Meta: model = Payment fields = ['patient', 'service', 'amount', 'payment_date', 'is_paid'] class MedicalCardSerializer(serializers.ModelSerializer): patient = PatientSerializer(read_only=True) class Meta: model = MedicalCard fields = ['patient', 'record_date', 'diagnosis'] \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 PatientSerializer - \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u0434\u0430\u043d\u043d\u044b\u043c\u0438 \u043e \u043f\u0430\u0446\u0438\u0435\u043d\u0442\u0430\u0445, \u0432\u043a\u043b\u044e\u0447\u0430\u044f \u0438\u0445 \u0447\u0442\u0435\u043d\u0438\u0435 \u0438 \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435. DoctorSerializer - \u042d\u0442\u043e\u0442 \u0441\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440 \u043f\u043e\u0434\u0445\u043e\u0434\u0438\u0442 \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u043f\u043e\u043b\u043d\u043e\u0439 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0435\u0439 \u043e \u0432\u0440\u0430\u0447\u0430\u0445, \u0432\u043a\u043b\u044e\u0447\u0430\u044f \u0438\u0445 \u0447\u0442\u0435\u043d\u0438\u0435 \u0438 \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435. AppointmentSerializer - \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u0437\u0430\u043f\u0438\u0441\u044f\u043c\u0438 \u043d\u0430 \u043f\u0440\u0438\u0435\u043c, \u0432\u043a\u043b\u044e\u0447\u0430\u044f \u0434\u0430\u043d\u043d\u044b\u0435 \u043e \u043f\u0430\u0446\u0438\u0435\u043d\u0442\u0435 \u0438 \u0432\u0440\u0430\u0447\u0435. PaymentSerializer - \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u0434\u0430\u043d\u043d\u044b\u043c\u0438 \u043e\u0431 \u043e\u043f\u043b\u0430\u0442\u0430\u0445, \u0432\u043a\u043b\u044e\u0447\u0430\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043f\u0430\u0446\u0438\u0435\u043d\u0442\u0435 \u0438 \u0443\u0441\u043b\u0443\u0433\u0430\u0445. MedicalCardSerializer - \u041f\u0440\u0435\u0434\u043d\u0430\u0437\u043d\u0430\u0447\u0435\u043d \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u043c\u0435\u0434\u0438\u0446\u0438\u043d\u0441\u043a\u0438\u043c\u0438 \u043a\u0430\u0440\u0442\u0430\u043c\u0438, \u0432\u043a\u043b\u044e\u0447\u0430\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0434\u0438\u0430\u0433\u043d\u043e\u0437\u0430\u0445 \u0438 \u043f\u0430\u0446\u0438\u0435\u043d\u0442\u0430\u0445.","title":"serializers"},{"location":"3/#_5","text":"http://127.0.0.1:8000/api/appointments/ \u0432\u044b\u0432\u043e\u0434\u0438\u0442 [ { \"id\": 1, \"appointment_date\": \"2024-12-01\", \"appointment_time\": \"18:00:00\", \"patient\": { \"id\": 1, \"first_name\": \"Andrey\", \"last_name\": \"Iakynin\", \"birth_date\": \"2024-12-10\" }, \"doctor\": { \"id\": 1, \"first_name\": \"Kirill\", \"last_name\": \"Kisikev\", \"sex\": \"M\", \"education\": \"Ped\", \"birth_date\": \"2024-12-10\" }, \"cabinet\": 1, \"service\": 1 } ] http://127.0.0.1:8000/api/cabinets/ \u0432\u044b\u0432\u043e\u0434\u0438\u0442 [ { \"id\": 1, \"number\": \"101\" } ] http://127.0.0.1:8000/api/doctor_schedule/ \u0432\u044b\u0432\u043e\u0434\u0438\u0442 [ { \"doctor\": { \"id\": 1, \"first_name\": \"Kirill\", \"last_name\": \"Kisikev\", \"sex\": \"M\", \"education\": \"Ped\", \"birth_date\": \"2024-12-10\" }, \"work_date\": \"2024-12-11\", \"start_time\": \"14:36:18\", \"is_working\": true } ]","title":"\u041f\u0440\u0438\u043c\u0435\u0440\u044b \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432"},{"location":"3/#djoser","text":"\u043c\u0435\u0442\u043e\u0434 POST \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f http://127.0.0.1:8000/api/auth/users/ \u041c\u0435\u0442\u043e\u0434 POST \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0442\u043e\u043a\u0435\u043d\u0430 http://127.0.0.1:8000/api/auth/token/login \u041c\u0435\u0442\u043e\u0432 GET \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u043f\u043e \u0442\u043e\u043a\u0435\u043d\u0443 http://127.0.0.1:8000/api/auth/users/me/","title":"Djoser"},{"location":"3/#_6","text":"\u0412\u044b\u0432\u0435\u0441\u0442\u0438 \u043f\u043e \u0430\u043b\u0444\u0430\u0432\u0438\u0442\u0443 \u0441\u043f\u0438\u0441\u043e\u043a \u0432\u0441\u0435\u0445 \u043f\u0430\u0446\u0438\u0435\u043d\u0442\u043e\u0432 \u0437\u0430\u0434\u0430\u043d\u043d\u043e\u0433\u043e \u0432\u0440\u0430\u0447\u0430 \u0441 \u0434\u0430\u0442\u0430\u043c\u0438 \u0438 \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c\u044e \u043f\u0440\u0438\u0435\u043c\u043e\u0432. \u0417\u0430\u043f\u0440\u043e\u0441 http://localhost:8000/api/doctors/3/appointments/ \u0412\u044b\u0432\u0435\u0441\u0442\u0438 \u0442\u0435\u043b\u0435\u0444\u043e\u043d\u044b \u0432\u0441\u0435\u0445 \u043f\u0430\u0446\u0438\u0435\u043d\u0442\u0430\u0445, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043f\u043e\u0441\u0435\u0449\u0430\u043b\u0438 \u043e\u0442\u043e\u043b\u0430\u0440\u0438\u043d\u0433\u043e\u043b\u043e\u0433\u043e\u0432 \u0438 \u0433\u043e\u0434 \u0440\u043e\u0436\u0434\u0435\u043d\u0438\u044f \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0431\u043e\u043b\u044c\u0448\u0435, \u0447\u0435\u043c 1987. \u0417\u0430\u043f\u0440\u043e\u0441 http://localhost:8000/api/otolaryngologist-patients/ \u0412\u044b\u0432\u0435\u0441\u0442\u0438 \u0441\u043f\u0438\u0441\u043e\u043a \u0432\u0440\u0430\u0447\u0435\u0439, \u0432 \u0433\u0440\u0430\u0444\u0438\u043a\u0435 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0441\u0440\u0435\u0434\u0438 \u0440\u0430\u0431\u043e\u0447\u0438\u0445 \u0434\u043d\u0435\u0439 \u0438\u043c\u0435\u0435\u0442\u0441\u044f \u0437\u0430\u0434\u0430\u043d\u043d\u044b\u0439. \u0417\u0430\u043f\u0440\u043e\u0441 http://localhost:8000/api/doctors-with-workday/?date=2024-12-01 \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u0440\u0438\u0435\u043c\u043e\u0432 \u043f\u0430\u0446\u0438\u0435\u043d\u0442\u043e\u0432 \u043f\u043e \u0434\u0430\u0442\u0430\u043c. \u0417\u0430\u043f\u0440\u043e\u0441 http://localhost:8000/api/appointments-count-by-date/?date=2024-12-01 \u0412\u044b\u0447\u0438\u0441\u043b\u0438\u0442\u044c \u0441\u0443\u043c\u043c\u0430\u0440\u043d\u0443\u044e \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u043b\u0435\u0447\u0435\u043d\u0438\u044f \u043f\u0430\u0446\u0438\u0435\u043d\u0442\u043e\u0432 \u043f\u043e \u0434\u043d\u044f\u043c \u0438 \u043f\u043e \u0432\u0440\u0430\u0447\u0430\u043c. \u0417\u0430\u043f\u0440\u043e\u0441 http://localhost:8000/api/total-treatment-cost-by-day-and-doctor/?date=2024-12-01 \u0421\u043f\u0438\u0441\u043e\u043a \u043f\u0430\u0446\u0438\u0435\u043d\u0442\u043e\u0432, \u0443\u0436\u0435 \u043e\u043f\u043b\u0430\u0442\u0438\u0432\u0448\u0438\u0445 \u043b\u0435\u0447\u0435\u043d\u0438\u0435. \u0417\u0430\u043f\u0440\u043e\u0441 http://localhost:8000/api/paid-patients/","title":"\u0410\u043d\u0430\u043b\u0438\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u044b"},{"location":"4/","text":"\u0421\u0430\u0439\u0442 \u0434\u043b\u044f \u0430\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u043c\u0435\u0434 \u043a\u043b\u0438\u043d\u0438\u043a\u0438 \u0413\u043b\u0430\u0432\u043d\u0430\u044f \u0441\u0442\u0440\u0430\u043d\u0446\u0430 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u044d\u0442\u043e\u0439 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b import React from \"react\"; import { Link } from \"react-router-dom\"; import \"./Home.css\"; import doctorsImage from \"../../assets/images/doctors.jpeg\"; const Home = () => { return ( <div className=\"home\"> <div className=\"home-left\"> <h1>Welcome</h1> <h2>Medical Clinic that You Can Trust</h2> <p>Providing the best healthcare services for you and your family.</p> <div className=\"buttons\"> <Link to=\"/services\" className=\"btn btn-services\">Services</Link> <button className=\"btn-info\">More Info</button> </div> </div> <div className=\"home-right\"> <img src={doctorsImage} alt=\"Doctors\" /> </div> </div> ); }; export default Home; \u0421\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u0434\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0434\u043e\u043a\u0442\u043e\u0440\u043e\u0432 \u041a\u043e\u0434 Api \u0434\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0443\u0447\u0435\u043d\u0438\u044f import axiosInstance from './axiosInstance'; // \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u043f\u0438\u0441\u043a\u0430 \u0434\u043e\u043a\u0442\u043e\u0440\u043e\u0432 export const getDoctors = async () => { try { const response = await axiosInstance.get('/doctors/'); return response.data; } catch (error) { console.error(\"Error fetching doctors:\", error); throw error; } }; // \u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043d\u043e\u0432\u043e\u0433\u043e \u0434\u043e\u043a\u0442\u043e\u0440\u0430 export const addDoctor = async (doctorData) => { try { const response = await axiosInstance.post('/doctors/', doctorData); return response.data; } catch (error) { console.error(\"Error adding doctor:\", error); throw error; } }; // \u0423\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u0434\u043e\u043a\u0442\u043e\u0440\u0430 \u043f\u043e id export const deleteDoctor = async (doctorId) => { try { const response = await axiosInstance.delete(`/doctors/${doctorId}/`); return response.data; // \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0435 \u043e\u0442\u0432\u0435\u0442\u0430 } catch (error) { console.error(\"Error deleting doctor:\", error); throw error; } }; ## \u041d\u0430\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043f\u0440\u0438\u0435\u043c\u0430 ![Alt text](site4.png) \u041a\u043e\u0434 APi import axiosInstance from './axiosInstance'; export const getAppointments = async () => { const response = await axiosInstance.get('/appointments/'); return response.data; }; export const addAppointment = async (appointmentData) => { try { const response = await axiosInstance.post('/appointments/', appointmentData); return response.data; } catch (error) { console.error(\"Error adding appointment:\", error); throw error; } }; export const deleteAppointment = async (appointmentId) => { try { const response = await axiosInstance.delete(`/appointments/${appointmentId}/`); return response.data; } catch (error) { console.error(\"Error deleting appointment:\", error); throw error; } }; export const updateAppointment = async (appointmentId, updatedData) => { try { const response = await axiosInstance.put(`/appointments/${appointmentId}/`, updatedData); return response.data; } catch (error) { console.error(\"Error updating appointment:\", error); throw error; } }; \u041a\u043e\u0434 \u0434\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u043d\u0438\u0435 \u0422\u043e\u043a\u0435\u043d\u0430 \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438 import axios from 'axios'; const getAuthToken = () => localStorage.getItem(\"authToken\"); const axiosInstance = axios.create({ baseURL: 'http://127.0.0.1:8000/api', headers: { 'Authorization': Token ${getAuthToken()} , }, }); export default axiosInstance;","title":"Task 2"},{"location":"4/#_1","text":"","title":"\u0421\u0430\u0439\u0442 \u0434\u043b\u044f \u0430\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u043c\u0435\u0434 \u043a\u043b\u0438\u043d\u0438\u043a\u0438"},{"location":"4/#_2","text":"\u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u044d\u0442\u043e\u0439 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b import React from \"react\"; import { Link } from \"react-router-dom\"; import \"./Home.css\"; import doctorsImage from \"../../assets/images/doctors.jpeg\"; const Home = () => { return ( <div className=\"home\"> <div className=\"home-left\"> <h1>Welcome</h1> <h2>Medical Clinic that You Can Trust</h2> <p>Providing the best healthcare services for you and your family.</p> <div className=\"buttons\"> <Link to=\"/services\" className=\"btn btn-services\">Services</Link> <button className=\"btn-info\">More Info</button> </div> </div> <div className=\"home-right\"> <img src={doctorsImage} alt=\"Doctors\" /> </div> </div> ); }; export default Home;","title":"\u0413\u043b\u0430\u0432\u043d\u0430\u044f \u0441\u0442\u0440\u0430\u043d\u0446\u0430"},{"location":"4/#_3","text":"\u041a\u043e\u0434 Api \u0434\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0443\u0447\u0435\u043d\u0438\u044f import axiosInstance from './axiosInstance'; // \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u043f\u0438\u0441\u043a\u0430 \u0434\u043e\u043a\u0442\u043e\u0440\u043e\u0432 export const getDoctors = async () => { try { const response = await axiosInstance.get('/doctors/'); return response.data; } catch (error) { console.error(\"Error fetching doctors:\", error); throw error; } }; // \u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043d\u043e\u0432\u043e\u0433\u043e \u0434\u043e\u043a\u0442\u043e\u0440\u0430 export const addDoctor = async (doctorData) => { try { const response = await axiosInstance.post('/doctors/', doctorData); return response.data; } catch (error) { console.error(\"Error adding doctor:\", error); throw error; } }; // \u0423\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u0434\u043e\u043a\u0442\u043e\u0440\u0430 \u043f\u043e id export const deleteDoctor = async (doctorId) => { try { const response = await axiosInstance.delete(`/doctors/${doctorId}/`); return response.data; // \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0435 \u043e\u0442\u0432\u0435\u0442\u0430 } catch (error) { console.error(\"Error deleting doctor:\", error); throw error; } }; ## \u041d\u0430\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043f\u0440\u0438\u0435\u043c\u0430 ![Alt text](site4.png) \u041a\u043e\u0434 APi import axiosInstance from './axiosInstance'; export const getAppointments = async () => { const response = await axiosInstance.get('/appointments/'); return response.data; }; export const addAppointment = async (appointmentData) => { try { const response = await axiosInstance.post('/appointments/', appointmentData); return response.data; } catch (error) { console.error(\"Error adding appointment:\", error); throw error; } }; export const deleteAppointment = async (appointmentId) => { try { const response = await axiosInstance.delete(`/appointments/${appointmentId}/`); return response.data; } catch (error) { console.error(\"Error deleting appointment:\", error); throw error; } }; export const updateAppointment = async (appointmentId, updatedData) => { try { const response = await axiosInstance.put(`/appointments/${appointmentId}/`, updatedData); return response.data; } catch (error) { console.error(\"Error updating appointment:\", error); throw error; } };","title":"\u0421\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u0434\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0434\u043e\u043a\u0442\u043e\u0440\u043e\u0432"},{"location":"4/#_4","text":"import axios from 'axios'; const getAuthToken = () => localStorage.getItem(\"authToken\"); const axiosInstance = axios.create({ baseURL: 'http://127.0.0.1:8000/api', headers: { 'Authorization': Token ${getAuthToken()} , }, }); export default axiosInstance;","title":"\u041a\u043e\u0434 \u0434\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u043d\u0438\u0435 \u0422\u043e\u043a\u0435\u043d\u0430 \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438"}]}